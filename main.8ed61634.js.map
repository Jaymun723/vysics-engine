{"version":3,"sources":["node_modules/maabm/dist/random/index.js","node_modules/maabm/dist/Matrix2D/Matrix2D.js","node_modules/maabm/dist/Matrix2D/index.js","node_modules/maabm/dist/utils.js","node_modules/maabm/dist/Vec2D/Vec2D.js","node_modules/maabm/dist/Vec2D/index.js","node_modules/maabm/dist/NeuralNetwork/NeuralNetwork.js","node_modules/maabm/dist/NeuralNetwork/ActivationFunction.js","node_modules/maabm/dist/NeuralNetwork/Layer.js","node_modules/maabm/dist/NeuralNetwork/index.js","node_modules/maabm/dist/Polygon/index.js","node_modules/maabm/dist/index.js","node_modules/vancas/dist/cjs/CanvasWrapper.js","node_modules/vancas/dist/cjs/CanvasLogic.js","node_modules/vancas/dist/cjs/CanvasDrawers.js","node_modules/vancas/dist/cjs/CanvasGroups.js","node_modules/vancas/dist/cjs/CanvasImage.js","node_modules/vancas/dist/cjs/CanvasMouse.js","node_modules/vancas/dist/cjs/index.js","../node_modules/maabm/dist/random/index.js","../node_modules/maabm/dist/Matrix2D/Matrix2D.js","../node_modules/maabm/dist/Matrix2D/index.js","../node_modules/maabm/dist/utils.js","../node_modules/maabm/dist/Vec2D/Vec2D.js","../node_modules/maabm/dist/Vec2D/index.js","../node_modules/maabm/dist/NeuralNetwork/NeuralNetwork.js","../node_modules/maabm/dist/NeuralNetwork/ActivationFunction.js","../node_modules/maabm/dist/NeuralNetwork/Layer.js","../node_modules/maabm/dist/NeuralNetwork/index.js","../node_modules/maabm/dist/Polygon/index.js","../node_modules/maabm/dist/index.js","../src/Collision/CircleCircle.ts","../src/Collision/CollisionInfo.ts","../src/Collision/PolygonCircle.ts","../src/Collision/PolygonPolygon.ts","../src/Collision/resolveCollision.ts","../src/Collision/index.ts","../src/Engine/Hooks.ts","../src/BroadPhase/AABB.ts","../src/BroadPhase/BruteBroadPhase.ts","../src/BroadPhase/Grid.ts","../src/BroadPhase/GridBroadPhase.ts","../src/BroadPhase/utils.ts","../src/BroadPhase/index.ts","../src/Engine/index.ts","../src/Objects/index.ts","../src/Shapes/Polygon.ts","../src/Shapes/Rectangle.ts","../src/Shapes/Circle.ts","../src/Shapes/index.ts","drawers.ts","ForceApplier.ts","menu.ts","mouse.ts","main.ts"],"names":[],"mappings":"A0BAA,ADAA,ANAA,AGAA,aICA,ADAA,ANCA,AGaA,OIdA,ADAA,ENCA,AGaA,EHbA,AGaA,EHbA,AGaA,GHZA,AGaA,MIfA,ADAA,ANEA,CGaA,CHbA,IGaA,CHbA,COFA,ADAA,INEA,AGaA,EAAA,GAeA,II9BA,ADAA,CCAA,ADAA,IH8BA,EAAA,CI9BA,ADAA,ANEA,CG4BA,CH5BA,CG4BA,CI7BA,ADAA,ANCA,EG6BA,CH5BA,EAAA,COFA,ADAA,ECCA,ADAA,CH6BA,CH5BA,IG4BA,EH5BA,EG4BA,EI7BA,ADAA,ECAA,ADAA,CH6BA,EI5BA,CDAA,CH4BA,EAAA,CI5BA,CDAA,CH4BA,CH5BA,EOAA,APAA,AGyCA,EIxCA,APDA,CMAA,ENCA,CMAA,CCAA,EJwCA,CGxCA,CHwCA,CHxCA,COAA,CJyCA,EItCA,ADHA,CNAA,IMAA,AHyCA,EGxCA,ANDA,COGA,AJsCA,IGxCA,ANDA,GGyCA,EAAA,IGxCA,CNDA,EMIA,ANJA,EAAA,COGA,EACA,AJqCA,CHzCA,EAMA,CMFA,AHiDA,GGhDA,CCDA,EDCA,ENCA,CG+CA,CGhDA,ANCA,CG+CA,CH/CA,CG+CA,CIjDA,CDCA,ANEA,CG+CA,EIlDA,EAAA,EDCA,ANEA,COHA,AJkDA,GIlDA,CPGA,COHA,CDEA,AHgDA,IIlDA,CDEA,AHgDA,CAAA,EH/CA,COHA,CPGA,EMDA,CCFA,APGA,AG+CA,EHxCA,COVA,AJkDA,CGhDA,ECFA,CJkDA,CIlDA,EJkEA,CG9DA,ANMA,CMNA,CNMA,EMNA,CNQA,CMRA,EH8DA,EAAA,EHtDA,AGsDA,EHvDA,AGuDA,EHvDA,AGuDA,EG9DA,ANOA,AGuDA,GACA,EG/DA,ENOA,GGwDA,CH3EA,CMYA,AH+DA,IAAA,CG/DA,CNZA,AG2EA,IAAA,EG/DA,AH+DA,GAAA,EA3EA,EGYA,ENZA,CMYA,EHZA,KHAA,IMgBA,MAAA,AHhBA,GHAA,CMgBA,ANhBA,IGAA,EGgBA,CNhBA,IAMA,MGNA,CAAA,CHMA,MGNA,EHMA,EAOA,AGIA,QHJA,AGIA,OAAA,EAgBA,CHpBA,EASA,KGWA,GHXA,GGWA,EAcA,EHzBA,MGyBA,UGlCA,EHkCA,EAaA,CG/CA,OAAA,AH+CA,KG/CA,IAMA,EHyCA,EAiBA,IG1DA,GACA,CHyDA,GGzDA,EAAA,EAAA,CHyDA,OGxDA,IAAA,MAAA,KAAA,KAAA,OACA,IACA,EAAA,EAAA,QAAA,GAEA,MAAA,GACA,MAAA,IAAA,wBAAA,KAAA,OAAA,QAAA,OAAA,KAGA,OAAA,GAGA,QAAA,cAAA;AzBjCA,aAEA,SAAA,EAAA,EAAA,GACA,MAAA,EAAA,KAAA,KAAA,iBAAA,EAAA,EAAA,GACA,EAAA,KAAA,MAAA,iBAAA,EAAA,EAAA,GACA,OAAA,KAAA,MAAA,KAAA,UAAA,EAAA,EAAA,IAAA,EAMA,SAAA,EAAA,EAAA,GACA,OAAA,KAAA,UAAA,EAAA,GAAA,EAOA,SAAA,EAAA,GAEA,OAAA,EADA,EAAA,EAAA,OAAA,IAnBA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAMA,QAAA,QAAA,EAOA,QAAA,UAAA,EASA,QAAA,OAAA;;ACvBA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,aACA,MAAA,EACA,YAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,GACA,EACA,KAAA,QAAA,GAGA,KAAA,MAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,IAGA,cAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,EAAA,KAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,KAAA,EAAA,WAAA,EAAA,IAGA,OAAA,IAAA,EAAA,EAAA,EAAA,GAEA,OACA,OAAA,IAAA,EAAA,KAAA,MAAA,KAAA,OAAA,KAAA,OAEA,SAAA,GACA,GAAA,MAAA,QAAA,IAAA,EAAA,SAAA,KAAA,MAAA,CACA,IAAA,MAAA,KAAA,EACA,IAAA,MAAA,QAAA,IAAA,EAAA,SAAA,KAAA,QAAA,EAAA,KAAA,GAAA,iBAAA,GACA,OAAA,EAGA,OAAA,EAEA,OAAA,EAEA,IAAA,EAAA,GACA,OAAA,KAAA,MAAA,GAAA,GAEA,IAAA,EAAA,EAAA,GACA,KAAA,MAAA,GAAA,GAAA,EAEA,WACA,OAAA,KAAA,MAEA,QAAA,GACA,IAAA,KAAA,SAAA,GAIA,MAAA,IAAA,MAAA,gCAHA,KAAA,MAAA,EAMA,aAAA,EAAA,GACA,OAAA,EAAA,KAAA,IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAEA,MAAA,GACA,KAAA,MAAA,EAAA,MAAA,KAAA,GAEA,aAAA,EAAA,EAAA,GACA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OACA,MAAA,IAAA,MAAA,qEAEA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAEA,MAAA,EAAA,GACA,KAAA,MAAA,EAAA,MAAA,KAAA,EAAA,GAEA,WAAA,EAAA,GACA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OACA,MAAA,IAAA,MAAA,0CAEA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAEA,IAAA,GACA,MAAA,EAAA,EAAA,IAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAEA,WAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAEA,IAAA,GACA,MAAA,EAAA,EAAA,IAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAEA,YAAA,EAAA,GACA,GAAA,iBAAA,EACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAEA,CACA,GAAA,EAAA,SAAA,EAAA,MACA,MAAA,IAAA,MAAA,8BAEA,MAAA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,QACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAEA,EAAA,IAAA,EAAA,EAAA,GAGA,OAAA,GAGA,KAAA,GACA,GAAA,iBAAA,EAIA,OAAA,EAAA,KAAA,KAAA,GAHA,KAAA,MAAA,GAAA,EAAA,GAMA,WAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAEA,IAAA,GACA,KAAA,MAAA,GAAA,EAAA,IAGA,QAAA,SAAA;;AC5HA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA;;ACLA,aAeA,SAAA,EAAA,EAAA,GACA,OAAA,KAAA,MAAA,EAAA,GAeA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,GAaA,SAAA,EAAA,GACA,OAAA,GAAA,OAAA,EAAA,YAAA,IAYA,SAAA,EAAA,EAAA,GACA,OAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,GAgBA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EA3EA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAiBA,QAAA,OAAA,EAgBA,QAAA,MAAA,EAcA,QAAA,YAAA,EAaA,QAAA,WAAA,EAiBA,QAAA,QAAA;;AC9EA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,YAmBA,MAAA,EACA,YAAA,EAAA,GACA,KAAA,EAAA,EACA,KAAA,EAAA,EAgBA,YAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAkBA,IAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAYA,MAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAqBA,MAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAEA,IAAA,EAAA,GACA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EACA,OAAA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,EAAA,GACA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EACA,OAAA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,GACA,MAAA,iBAAA,EACA,KAAA,IAAA,GAAA,EAAA,GAEA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,GACA,MAAA,iBAAA,EACA,KAAA,IAAA,GAAA,EAAA,GAEA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,YACA,MAAA,EAAA,KAAA,OACA,IAAA,EAAA,EAIA,OAHA,EAAA,IACA,EAAA,EAAA,GAEA,KAAA,IAAA,GAEA,OACA,OAAA,KAAA,KAAA,KAAA,eAEA,cACA,OAAA,KAAA,IAAA,KAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,GAEA,MAAA,GACA,MAAA,iBAAA,EACA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAEA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAEA,aAAA,EAAA,GACA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,EAAA,MAAA,GAEA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,EAAA,MAAA,GAEA,MAAA,IAAA,MAAA,qDAEA,IAAA,GACA,OAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAEA,MAAA,EAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,IAGA,aAAA,EAAA,GACA,MAAA,EAAA,KAAA,IAAA,GACA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAEA,UAAA,GACA,OAAA,KAAA,KAAA,KAAA,IAAA,IAAA,KAAA,OAAA,EAAA,UAGA,QAAA,MAAA;;ACpKA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA;;ACLA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EACA,YAAA,EAAA,IACA,KAAA,OAAA,GACA,IAAA,MAAA,KAAA,EACA,KAAA,SAAA,GAGA,SAAA,GACA,GAAA,IAAA,KAAA,OAAA,OACA,KAAA,OAAA,KAAA,OAEA,CAAA,GAAA,EAAA,YAAA,KAAA,OAAA,KAAA,OAAA,OAAA,GAAA,WAIA,MAAA,IAAA,MAAA,0EAHA,KAAA,OAAA,KAAA,IAMA,QAAA,GACA,IAAA,EAAA,EAAA,QACA,IAAA,MAAA,KAAA,KAAA,OACA,IACA,EAAA,EAAA,QAAA,GAEA,MAAA,GACA,MAAA,IAAA,wBAAA,KAAA,OAAA,QAAA,OAAA,KAGA,OAAA,GAGA,QAAA,cAAA;;ACjCA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EACA,YAAA,EAAA,GACA,KAAA,KAAA,EACA,KAAA,MAAA,GAGA,QAAA,mBAAA,EACA,QAAA,UAAA,IAAA,EAAA,GAAA,GAAA,EAAA,KAAA,KAAA,IAAA,GAAA,GAAA,EAAA;;ACTA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,eACA,EAAA,QAAA,wBACA,MAAA,EACA,YAAA,GACA,KAAA,UAAA,EAAA,UACA,KAAA,WAAA,EAAA,WACA,KAAA,mBAAA,EAAA,oBAAA,EAAA,UACA,KAAA,QAAA,EAAA,SAAA,OAAA,KAAA,WAAA,KAAA,WACA,KAAA,MAAA,EAAA,SAAA,OAAA,KAAA,WAAA,GAEA,QAAA,GACA,GAAA,EAAA,SAAA,KAAA,UACA,MAAA,IAAA,MAAA,qBAEA,MAAA,EAAA,IAAA,EAAA,SAAA,KAAA,UAAA,EAAA,EAAA,IAAA,GAAA,CAAA,KACA,EAAA,KAAA,QAAA,KAAA,GAGA,OAFA,EAAA,IAAA,KAAA,OACA,EAAA,MAAA,GAAA,KAAA,mBAAA,KAAA,IACA,EAAA,KAAA,IAAA,GAAA,EAAA,KAGA,QAAA,YAAA;;ACvBA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA,oBACA,EAAA,QAAA;;ACNA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,YACA,MAAA,EACA,gBAAA,GACA,MAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MACA,EAAA,GADA,EAAA,GAAA,EAAA,QACA,IAAA,EAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAEA,kBAAA,GAEA,OADA,EAAA,SAAA,GACA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,GAAA,aAEA,mBAAA,GAEA,OADA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IACA,IAAA,EAAA,QAEA,yBAAA,GACA,MAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,OACA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,KAAA,MAAA,EAAA,MAAA,GAAA,EAAA,IAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAEA,sBAAA,GACA,MAAA,EAAA,EAAA,YAAA,GACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,EAAA,EAAA,GAAA,IAAA,GAAA,OACA,EAAA,IACA,EAAA,GAGA,OAAA,EAEA,0BAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,MAAA,EAAA,GACA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,MAAA,GAAA,EACA,EAAA,EAAA,IAAA,GAAA,IAAA,GACA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,EACA,EAAA,EACA,IAAA,GACA,IAAA,EAAA,IAAA,IACA,IAAA,EAAA,GACA,GAAA,EACA,GAAA,EAKA,OAFA,GADA,EAAA,EAEA,GAAA,EAAA,EAAA,IAAA,GAGA,eAAA,GACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,GAAA,EAAA,MAAA,GAAA,EAEA,OAAA,EASA,iBAAA,EAAA,GACA,MAAA,EAAA,CAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,OACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,MAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GACA,GAAA,GAAA,EACA,OAAA,EAEA,GAAA,EAAA,EAAA,EAAA,EAEA,OAAA,KAAA,IAAA,IAAA,EAAA,GAAA,GAGA,QAAA,QAAA;;ACpGA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA,eACA,EAAA,QAAA,YACA,EAAA,QAAA,YACA,EAAA,QAAA,aACA,EAAA,QAAA,oBACA,EAAA,QAAA;;ACVA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAIA,MAAA,EACA,YAAA,GACA,KAAA,OAAA,EAAA,MACA,KAAA,QAAA,EAAA,OACA,KAAA,SAAA,SAAA,cAAA,UACA,KAAA,SAAA,MAAA,KAAA,OACA,KAAA,SAAA,OAAA,KAAA,QACA,KAAA,IAAA,KAAA,SAAA,WAAA,MAKA,YACA,OAAA,KAAA,OAEA,UAAA,GACA,KAAA,SAAA,MAAA,EACA,KAAA,OAAA,EAKA,aACA,OAAA,KAAA,QAEA,WAAA,GACA,KAAA,SAAA,OAAA,EACA,KAAA,QAAA,GAGA,QAAA,cAAA;;ACnCA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,mBAIA,MAAA,UAAA,EAAA,cACA,cACA,SAAA,WAIA,KAAA,SAAA,EAIA,KAAA,OAAA,EACA,KAAA,SAAA,EAaA,KAAA,OAAA,CAAA,OAKA,KAAA,OAAA,SACA,KAAA,KAAA,MACA,GAAA,KAAA,QAAA,CACA,IAAA,KAAA,WACA,KAAA,SAAA,KAAA,OAEA,MAAA,EAAA,KAAA,MACA,GAAA,EAAA,KAAA,UAAA,IACA,KAAA,OAAA,GACA,KAAA,SACA,KAAA,SAAA,EACA,KAAA,OAAA,sBAAA,KAAA,SAOA,QACA,KAAA,SAAA,EACA,KAAA,OAKA,OACA,KAAA,SAAA,EACA,KAAA,SAAA,EACA,qBAAA,KAAA,SAGA,QAAA,YAAA;;AClEA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,iBACA,EAAA,CACA,MAAA,QACA,UAAA,EACA,KAAA,aACA,MAAA,SAEA,MAAA,UAAA,EAAA,YAIA,KAAA,GACA,KAAA,IAAA,YACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,SACA,KAAA,IAAA,YAKA,KAAA,GACA,KAAA,IAAA,YACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,KAAA,IAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QACA,EAAA,QACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,WAGA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,QAEA,KAAA,IAAA,YAKA,OAAA,GACA,KAAA,IAAA,YACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,KAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,IACA,EAAA,QACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,WAGA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,QAEA,KAAA,IAAA,YAEA,UAAA,GACA,MAAA,EAAA,CACA,MAAA,KACA,KAAA,IAAA,YACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,GAEA,GAAA,CAAA,EAAA,KACA,KAAA,IAAA,OAAA,EAAA,GACA,GAEA,KAAA,CAAA,EAAA,KACA,KAAA,IAAA,OAAA,EAAA,GACA,GAEA,KAAA,KACA,KAAA,IAAA,YACA,EAAA,QACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,WAGA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,UAIA,OAAA,EAEA,SAAA,GACA,KAAA,IAAA,YACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,IAAA,OAAA,EAAA,GAAA,EAAA,IACA,EAAA,QACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,WAGA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,QAEA,KAAA,IAAA,YAKA,WAAA,GACA,KAAA,KAAA,CACA,EAAA,EACA,EAAA,EACA,MAAA,EACA,OAAA,KAAA,OACA,MAAA,KAAA,QAMA,KAAA,GACA,KAAA,IAAA,KAAA,EAAA,MAAA,EAAA,KACA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,UAAA,EAAA,WAAA,EAAA,UACA,EAAA,QACA,KAAA,IAAA,YAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,WAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,YAGA,KAAA,IAAA,UAAA,EAAA,OAAA,EAAA,MACA,KAAA,IAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAMA,QACA,KAAA,IAAA,UAAA,EAAA,EAAA,KAAA,MAAA,KAAA,SAGA,QAAA,cAAA;;ACzIA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,mBACA,MAAA,UAAA,EAAA,cACA,cAAA,EAAA,GACA,KAAA,IAAA,OACA,KAAA,IAAA,UAAA,EAAA,EAAA,EAAA,GACA,KAAA,IAAA,OAAA,EAAA,UACA,KAAA,IAAA,WAAA,EAAA,GAAA,EAAA,GACA,IACA,KAAA,IAAA,UAEA,QAAA,EAAA,GACA,MAAA,EAAA,GAAA,KAAA,QAAA,IAAA,EAAA,GAAA,GACA,MAAA,CACA,UAAA,GACA,EAAA,IAAA,KAAA,IAAA,UAAA,EAAA,EAAA,EAAA,IAEA,OAAA,GACA,EAAA,IAAA,KAAA,IAAA,OAAA,EAAA,WAEA,MAAA,GACA,EAAA,IAAA,KAAA,IAAA,MAAA,EAAA,EAAA,EAAA,IAEA,OAAA,KACA,KAAA,IAAA,OACA,IAAA,MAAA,KAAA,EACA,IAEA,IACA,KAAA,IAAA,YAIA,MAAA,GACA,OAAA,KAAA,QAAA,GAAA,IAGA,QAAA,aAAA;;ACtCA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,kBACA,QAAA,UAAA,CAAA,GACA,IAAA,QAAA,IACA,MAAA,EAAA,IAAA,MACA,EAAA,IAAA,EACA,EAAA,OAAA,MACA,EAAA,QAIA,MAAA,UAAA,EAAA,aACA,MAAA,QACA,IAAA,EAAA,aACA,IAAA,EAAA,aACA,IAAA,EAAA,iBACA,IAAA,EAAA,kBACA,IAAA,EAAA,eACA,IAAA,EAAA,UACA,KAAA,IAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,gBAEA,IAAA,EAAA,eAAA,IAAA,EAAA,UACA,KAAA,IAAA,UAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,WAGA,KAAA,IAAA,UAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAIA,QAAA,YAAA;;AC9BA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,iBACA,MAAA,UAAA,EAAA,YACA,cACA,SAAA,WACA,KAAA,MAAA,CACA,EAAA,EACA,EAAA,EAEA,OAAA,EACA,gBAAA,EACA,aAAA,GAEA,KAAA,aAAA,CAAA,IACA,KAAA,MAAA,gBACA,EAAA,iBAEA,KAAA,MAAA,EAAA,EAAA,QACA,KAAA,MAAA,EAAA,EAAA,QACA,KAAA,MAAA,OAAA,EAAA,UAEA,KAAA,YAAA,CAAA,KACA,IAAA,KAAA,MAAA,aACA,EAAA,mBAIA,aACA,KAAA,SAAA,iBAAA,YAAA,KAAA,cACA,KAAA,SAAA,iBAAA,UAAA,KAAA,cACA,KAAA,SAAA,iBAAA,YAAA,KAAA,cACA,KAAA,SAAA,iBAAA,cAAA,KAAA,aAEA,eACA,KAAA,SAAA,oBAAA,YAAA,KAAA,cACA,KAAA,SAAA,oBAAA,UAAA,KAAA,cACA,KAAA,SAAA,oBAAA,YAAA,KAAA,cACA,KAAA,SAAA,oBAAA,cAAA,KAAA,aAEA,QACA,MAAA,QACA,KAAA,aAEA,OACA,MAAA,OACA,KAAA,gBAGA,QAAA,YAAA;;ACjDA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,iBACA,QAAA,UAAA,EAAA,UACA,MAAA,EAAA,QAAA,iBACA,MAAA,UAAA,EAAA,aAEA,QAAA,OAAA,EAiBA,QAAA,aAAA,CAAA,GACA,IAAA,EAAA;;AEzBA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,aACA,MAAA,EACA,YAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,GACA,EACA,KAAA,QAAA,GAGA,KAAA,MAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,IAGA,cAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,EAAA,KAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,KAAA,EAAA,WAAA,EAAA,IAGA,OAAA,IAAA,EAAA,EAAA,EAAA,GAEA,OACA,OAAA,IAAA,EAAA,KAAA,MAAA,KAAA,OAAA,KAAA,OAEA,SAAA,GACA,GAAA,MAAA,QAAA,IAAA,EAAA,SAAA,KAAA,MAAA,CACA,IAAA,MAAA,KAAA,EACA,IAAA,MAAA,QAAA,IAAA,EAAA,SAAA,KAAA,QAAA,EAAA,KAAA,GAAA,iBAAA,GACA,OAAA,EAGA,OAAA,EAEA,OAAA,EAEA,IAAA,EAAA,GACA,OAAA,KAAA,MAAA,GAAA,GAEA,IAAA,EAAA,EAAA,GACA,KAAA,MAAA,GAAA,GAAA,EAEA,WACA,OAAA,KAAA,MAEA,QAAA,GACA,IAAA,KAAA,SAAA,GAIA,MAAA,IAAA,MAAA,gCAHA,KAAA,MAAA,EAMA,aAAA,EAAA,GACA,OAAA,EAAA,KAAA,IAAA,CAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAEA,MAAA,GACA,KAAA,MAAA,EAAA,MAAA,KAAA,GAEA,aAAA,EAAA,EAAA,GACA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OACA,MAAA,IAAA,MAAA,qEAEA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAEA,MAAA,EAAA,GACA,KAAA,MAAA,EAAA,MAAA,KAAA,EAAA,GAEA,WAAA,EAAA,GACA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OACA,MAAA,IAAA,MAAA,0CAEA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAEA,IAAA,GACA,MAAA,EAAA,EAAA,IAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAEA,WAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAEA,IAAA,GACA,MAAA,EAAA,EAAA,IAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAEA,YAAA,EAAA,GACA,GAAA,iBAAA,EACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAEA,CACA,GAAA,EAAA,SAAA,EAAA,MACA,MAAA,IAAA,MAAA,8BAEA,MAAA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,QACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAEA,EAAA,IAAA,EAAA,EAAA,GAGA,OAAA,GAGA,KAAA,GACA,GAAA,iBAAA,EAIA,OAAA,EAAA,KAAA,KAAA,GAHA,KAAA,MAAA,GAAA,EAAA,GAMA,WAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAEA,IAAA,GACA,KAAA,MAAA,GAAA,EAAA,IAGA,QAAA,SAAA;;AC5HA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA;;AELA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,YAmBA,MAAA,EACA,YAAA,EAAA,GACA,KAAA,EAAA,EACA,KAAA,EAAA,EAgBA,YAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAkBA,IAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAYA,MAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAqBA,MAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAEA,IAAA,EAAA,GACA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EACA,OAAA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,EAAA,GACA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EACA,OAAA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,GACA,MAAA,iBAAA,EACA,KAAA,IAAA,GAAA,EAAA,GAEA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,IAAA,GACA,MAAA,iBAAA,EACA,KAAA,IAAA,GAAA,EAAA,GAEA,KAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAEA,YACA,MAAA,EAAA,KAAA,OACA,IAAA,EAAA,EAIA,OAHA,EAAA,IACA,EAAA,EAAA,GAEA,KAAA,IAAA,GAEA,OACA,OAAA,KAAA,KAAA,KAAA,eAEA,cACA,OAAA,KAAA,IAAA,KAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,GAEA,MAAA,GACA,MAAA,iBAAA,EACA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAEA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAEA,aAAA,EAAA,GACA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,EAAA,MAAA,GAEA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,EAAA,MAAA,GAEA,MAAA,IAAA,MAAA,qDAEA,IAAA,GACA,OAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAEA,MAAA,EAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,IAGA,aAAA,EAAA,GACA,MAAA,EAAA,KAAA,IAAA,GACA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAEA,UAAA,GACA,OAAA,KAAA,KAAA,KAAA,IAAA,IAAA,KAAA,OAAA,EAAA,UAGA,QAAA,MAAA;;ACpKA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA;;AGLA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,eACA,EAAA,QAAA,wBACA,MAAA,EACA,YAAA,GACA,KAAA,UAAA,EAAA,UACA,KAAA,WAAA,EAAA,WACA,KAAA,mBAAA,EAAA,oBAAA,EAAA,UACA,KAAA,QAAA,EAAA,SAAA,OAAA,KAAA,WAAA,KAAA,WACA,KAAA,MAAA,EAAA,SAAA,OAAA,KAAA,WAAA,GAEA,QAAA,GACA,GAAA,EAAA,SAAA,KAAA,UACA,MAAA,IAAA,MAAA,qBAEA,MAAA,EAAA,IAAA,EAAA,SAAA,KAAA,UAAA,EAAA,EAAA,IAAA,GAAA,CAAA,KACA,EAAA,KAAA,QAAA,KAAA,GAGA,OAFA,EAAA,IAAA,KAAA,OACA,EAAA,MAAA,GAAA,KAAA,mBAAA,KAAA,IACA,EAAA,KAAA,IAAA,GAAA,EAAA,KAGA,QAAA,YAAA;;ACvBA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA,oBACA,EAAA,QAAA;;ACNA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,MAAA,EAAA,QAAA,YACA,MAAA,EACA,gBAAA,GACA,MAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MACA,EAAA,GADA,EAAA,GAAA,EAAA,QACA,IAAA,EAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAEA,kBAAA,GAEA,OADA,EAAA,SAAA,GACA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,GAAA,aAEA,mBAAA,GAEA,OADA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IACA,IAAA,EAAA,QAEA,yBAAA,GACA,MAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,OACA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,KAAA,MAAA,EAAA,MAAA,GAAA,EAAA,IAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAEA,sBAAA,GACA,MAAA,EAAA,EAAA,YAAA,GACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,EAAA,EAAA,GAAA,IAAA,GAAA,OACA,EAAA,IACA,EAAA,GAGA,OAAA,EAEA,0BAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,MAAA,EAAA,GACA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,MAAA,GAAA,EACA,EAAA,EAAA,IAAA,GAAA,IAAA,GACA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,EACA,EAAA,EACA,IAAA,GACA,IAAA,EAAA,IAAA,IACA,IAAA,EAAA,GACA,GAAA,EACA,GAAA,EAKA,OAFA,GADA,EAAA,EAEA,GAAA,EAAA,EAAA,IAAA,GAGA,eAAA,GACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,MAAA,GAAA,EAAA,GAAA,EAAA,OACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,GAAA,EAAA,MAAA,GAAA,EAEA,OAAA,EASA,iBAAA,EAAA,GACA,MAAA,EAAA,CAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,OACA,IAAA,EAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,MAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GACA,GAAA,GAAA,EACA,OAAA,EAEA,GAAA,EAAA,EAAA,EAAA,EAEA,OAAA,KAAA,IAAA,IAAA,EAAA,GAAA,GAGA,QAAA,QAAA;;ACpGA,aACA,SAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,EAAA,QAAA,eACA,EAAA,QAAA,YACA,EAAA,QAAA,YACA,EAAA,QAAA,aACA,EAAA,QAAA,oBACA,EAAA,QAAA;;ACNa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,2BAAA,EAJb,IAAA,EAAA,QAAA,SAEA,EAAA,QAAA,KAEa,EAAwB,SAAC,EAAqB,GACnD,IAAA,EAAW,EAAE,OAAO,IAAI,EAAE,QAC1B,EAAc,EAAS,cAGzB,GAFqB,KAAA,IAAC,EAAE,OAAS,EAAE,OAAW,IAE1B,EAAa,CAC/B,GAAgB,IAAhB,EAAmB,CACf,IAAA,EAAQ,EAAE,OAAS,EAAE,OAAS,EAAS,OAEvC,EAAiB,EAAS,KAAK,GAAG,YAClC,EAAiB,EAAE,OAAO,IAAI,EAAe,IAAI,EAAE,SAElD,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAA,EACA,OAAQ,EAAS,YACjB,MAAO,IAEJ,OAAI,EAAE,OAAS,EAAE,OACf,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAAE,OACpB,OAAQ,IAAI,EAAA,MAAM,GAAI,GACtB,MAAO,EAAE,OAAO,IAAI,EAAG,EAAE,UAGpB,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAAE,OACpB,OAAQ,IAAI,EAAA,MAAM,GAAI,GACtB,MAAO,EAAE,OAAO,IAAI,EAAG,EAAE,UAIxB,OAAA,GArCI,QAAA,sBAAqB;;ACOlC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAAa,IAAA,EAAA,WASC,SAAA,EAAA,GAAqC,EAAA,KAAA,GAC1C,KAAA,EAAI,EAAI,EACR,KAAA,EAAI,EAAI,EACR,KAAA,MAAQ,EAAI,MACZ,KAAA,OAAS,EAAI,OACb,KAAA,MAAQ,EAAI,MACZ,KAAA,IAAM,KAAK,MAAM,IAAI,KAAK,OAAO,IAAI,KAAK,QAfnD,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBAkBwB,MAAA,WACb,OAAA,IAAI,EAAc,CACvB,EAAG,KAAK,EACR,EAAG,KAAK,EACR,MAAO,KAAK,MACZ,OAAQ,KAAK,OAAO,KAAK,GACzB,MAAO,KAAK,UAxBlB,EAAa,GAAb,QAAA,cAAA;;ACiBa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,4BAAA,EA3Bb,IAAA,EAAA,QAAA,KAEM,EAAc,SAAC,EAA4C,GAG1D,IAFD,IAAA,GAAgB,EAAA,EAChB,EAAmB,EACd,EAAI,EAAG,EAAI,EAAE,SAAS,SAAU,EAAG,CACpC,IACA,EADI,EAAE,OAAO,IAAI,EAAE,SAAS,IACb,IAAI,EAAE,QAAQ,IAC/B,GAAA,EAAa,EACR,MAAA,CACL,QAAQ,EACR,iBAAkB,EAClB,SAAU,GAGV,EAAa,IACf,EAAe,EACf,EAAmB,GAGhB,MAAA,CACL,QAAQ,EACR,iBAAA,EACA,SAAU,IAID,EAAyB,SAAC,EAA4C,GAClC,IAAA,EAAA,EAAY,EAAG,GAAtD,EAAA,EAAA,SAAU,EAAA,EAAA,OAAQ,EAAA,EAAA,iBAEtB,GAAC,EAkDE,CACC,IAAA,EAAY,EAAE,QAAQ,GAAkB,IAAI,EAAE,QAC7C,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAClB,OAAQ,EAAE,QAAQ,GAClB,MAAO,EAAE,OAAO,IAAI,KAxDhB,IAAA,EAAK,EAAE,OAAO,IAAI,EAAE,SAAS,IAC7B,EAAK,EAAE,UAAU,EAAmB,GAAK,EAAE,SAAS,QAAQ,IAAI,EAAE,SAAS,IAG7E,GAFQ,EAAG,IAAI,GAET,EAAG,CACL,IAAA,EAAO,EAAG,OACZ,GAAA,EAAO,EAAE,OACJ,OAAA,EAEH,IAAA,EAAS,EAAG,YACZ,EAAY,EAAO,KAAK,EAAE,QACzB,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAClB,OAAA,EACA,MAAO,EAAE,OAAO,IAAI,KAGhB,IAAA,EAAK,EAAE,OAAO,IAAI,EAAE,UAAU,EAAmB,GAAK,EAAE,SAAS,SACjE,EAAK,EAAE,SAAS,GAAkB,IAAI,EAAE,UAAU,EAAmB,GAAK,EAAE,SAAS,SAEvF,GADQ,EAAG,IAAI,GACT,EAAG,CACL,IAAA,EAAO,EAAG,OACZ,GAAA,EAAO,EAAE,OACJ,OAAA,EAEH,IAAA,EAAS,EAAG,YACZ,EAAY,EAAO,KAAK,EAAE,QACzB,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAClB,OAAA,EACA,MAAO,EAAE,OAAO,IAAI,KAEjB,GAAI,EAAW,EAAE,OAAQ,CACxB,IAAA,EAAY,EAAE,QAAQ,GAAkB,IAAI,EAAE,QAC7C,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAE,OAAS,EAClB,OAAQ,EAAE,QAAQ,GAClB,MAAO,EAAE,OAAO,IAAI,KAGf,OAAA,GAlDF,QAAA,uBAAsB;;ACyCtB,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,6BAAA,EApEb,IAAA,EAAA,QAAA,KAQM,EAAmB,SAAC,EAAmB,EAAY,GACjD,IADoE,EACpE,EAAe,CACnB,MAAO,EAAA,EACP,WAAO,GAEY,EAAA,EAAA,GALqD,IAK3C,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApB,IAAA,EAAoB,EAAA,MAEvB,EADU,EAAO,IAAI,GACA,IAAI,GAC3B,EAAa,GAAK,EAAa,EAAa,OAC9C,EAAa,MAAQ,EACrB,EAAa,KAAO,IAVkD,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IActE,YAAuB,IAAvB,EAAa,WACR,EAEA,GAIL,EAA2B,SAC/B,EACA,GAOO,IALH,IAAA,EACA,EAAe,EAAA,EACf,EAAY,EACZ,GAAa,EACb,EAAI,EACD,GAAc,EAAI,EAAE,QAAQ,QAAQ,CACnC,IAEA,EAFI,EAAE,QAAQ,GAEN,KAAK,GACb,EAAW,EAAE,SAAS,GAEtB,EAAmB,EAAiB,EAAE,SAAU,EAAK,GAC3D,OAAkC,IAArB,OAEY,IAArB,GAAkC,EAAiB,KAAO,IAC5D,EAAe,EAAiB,KAChC,EAAY,EACZ,EAAe,EAAiB,OAElC,IAEE,GAAA,GAAc,EAAc,CACxB,IAAA,EAAS,EAAE,QAAQ,GACnB,EAAQ,EAAa,IAAI,EAAO,IAAI,IACnC,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EACP,OAAA,EACA,MAAA,IAGG,OAAA,GAGI,EAA0B,SACrC,EACA,GAEM,IAAA,EAAS,EAAyB,EAAG,GACvC,IAAW,IAAX,EAAkB,CACd,IAAA,EAAS,EAAyB,EAAG,GACvC,IAAW,IAAX,EAAkB,CAEhB,GAAA,EAAO,MAAQ,EAAO,MAAO,CACzB,IAAA,EAAW,EAAO,OAAO,IAAI,EAAO,OACnC,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAO,MACd,OAAQ,EAAO,OACf,MAAO,EAAO,MAAM,IAAI,KAGnB,OAAA,IAAI,EAAA,cAAc,CACvB,EAAA,EACA,EAAA,EACA,MAAO,EAAO,MACd,OAAQ,EAAO,OAAO,KAAK,GAC3B,MAAO,EAAO,SAKf,OAAA,GA7BI,QAAA,wBAAuB;;AClEvB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAAN,IAAM,EAAmB,SAC9B,EACA,GAII,GAAwB,IAAxB,EAAU,EAAE,SAAyC,IAAxB,EAAU,EAAE,QAAzC,CAEA,GAAA,EAAsB,CAClB,IAAA,EAAoB,EAAU,OAAS,EAAU,EAAE,QAAU,EAAU,EAAE,SAAY,EAAqB,KAC1G,EAAmB,EAAU,OAAO,IAAI,GAC9C,EAAU,EAAE,KAAK,EAAiB,KAAK,EAAU,EAAE,UACnD,EAAU,EAAE,KAAK,EAAiB,IAAI,EAAU,EAAE,UAG9C,IAAA,EAAI,EAAU,OAEd,EAAQ,EAAU,MAAM,IAAI,EAAU,EAAE,SAAW,EAAU,EAAE,QAAU,EAAU,EAAE,UACrF,EAAM,EAAU,IAAI,IAAI,EAAU,EAAE,SAAW,EAAU,EAAE,QAAU,EAAU,EAAE,UACjF,EAAI,EAAM,IAAI,GAEd,EAAK,EAAE,IAAI,EAAU,EAAE,UACvB,EAAK,EAAE,IAAI,EAAU,EAAE,UAEvB,EAAY,EAAU,EAAE,SAAS,KACpC,EAAI,EAAU,EAAE,gBAAkB,EAAG,EACtC,EAAU,EAAE,gBAAkB,EAAG,GAM7B,EAJY,EAAU,EAAE,SAAS,KACpC,EAAI,EAAU,EAAE,gBAAkB,EAAG,EACtC,EAAU,EAAE,gBAAkB,EAAG,GAEA,IAAI,GAEjC,EAAoB,EAAiB,IAAI,GAE3C,KAAA,EAAoB,GAApB,CAIE,IAAA,EAAc,KAAK,IAAI,EAAU,EAAE,YAAa,EAAU,EAAE,aAC5D,EAAW,KAAK,IAAI,EAAU,EAAE,SAAU,EAAU,EAAE,UAEtD,EAAW,EAAG,MAAM,GACpB,EAAW,EAAG,MAAM,GAEpB,IACD,EAAI,GAAe,GACrB,EAAU,EAAE,QACX,EAAU,EAAE,QACZ,EAAW,EAAW,EAAU,EAAE,WAClC,EAAW,EAAW,EAAU,EAAE,YAEhC,EAAgB,EAAE,IAAI,GAI5B,EAAU,EAAE,SAAW,EAAU,EAAE,SAAS,IAAI,EAAc,IAAI,EAAU,EAAE,UAC9E,EAAU,EAAE,SAAW,EAAU,EAAE,SAAS,IAAI,EAAc,IAAI,EAAU,EAAE,UAC9E,EAAU,EAAE,iBAAmB,EAAW,EAAK,EAAU,EAAE,WAC3D,EAAU,EAAE,iBAAmB,EAAW,EAAK,EAAU,EAAE,WAKrD,IAAA,EAAU,EAAiB,IAAI,EAAE,IAAI,IAAoB,YAAY,KAAK,GAE1E,EAAW,EAAG,MAAM,GACpB,EAAW,EAAG,MAAM,GAEtB,IACC,EAAI,GAAe,EAAiB,IAAI,GAAW,GACrD,EAAU,EAAE,QACX,EAAU,EAAE,QACZ,EAAW,EAAW,EAAU,EAAE,WAClC,EAAW,EAAW,EAAU,EAAE,YAElC,EAAK,IACP,EAAK,GAGD,IAAA,EAAiB,EAAQ,IAAI,GAEnC,EAAU,EAAE,SAAW,EAAU,EAAE,SAAS,IAAI,EAAe,IAAI,EAAU,EAAE,UAC/E,EAAU,EAAE,SAAW,EAAU,EAAE,SAAS,IAAI,EAAe,IAAI,EAAU,EAAE,UAC/E,EAAU,EAAE,iBAAmB,EAAW,EAAK,EAAU,EAAE,WAC3D,EAAU,EAAE,iBAAmB,EAAW,EAAK,EAAU,EAAE,cAtFhD,QAAA,iBAAgB;;ACC7B,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,cAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,EAAA,QAAA,kBAAA,SACA,EAAA,QAAA,mBAAA,SACA,EAAA,QAAA,mBAAA,SACA,EAAA,QAAA,oBAAA,SACA,EAAA,QAAA,sBAAA;;AC8Da,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,kBAAA,QAAA,eAAA,QAAA,iBAAA,EAlEb,IAAA,EAAA,QAAA,KAGA,EAAA,QAAA,SAIa,EAA0B,SAAC,GACjB,IAD2B,EAC3B,EAAA,EAAA,EAAO,SADoB,IACX,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MAC/B,EAAO,aACT,EAAO,MAAQ,EAAO,MAAM,IAAI,EAAA,cAAc,WAHF,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAArC,QAAA,YAAW,EAQjB,IAAM,EAAiB,SAAC,GAatB,OAZsB,SAAC,GACP,IADiB,EACjB,EAAA,EAAA,EAAO,SADU,IACD,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MAC/B,GAAA,EAAO,gBAAiB,CACpB,IAAA,EAAI,EAAO,SACX,EAAW,EAAE,IAAI,GACjB,EAAO,EAAO,MAAM,UACpB,EAAI,EAAS,IAAI,EAAO,EAAU,EAAO,iBAAmB,IAClE,EAAO,MAAQ,EAAO,MAAM,IAAI,KAPE,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OAD7B,QAAA,eAAc,EAgBpB,IAAM,EAAoB,SAAC,GAWzB,OAVyB,SAAC,GACV,IADoB,EACpB,EAAA,EAAA,EAAO,SADa,IACJ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1B,IAAA,EAA0B,EAAA,MACnC,EAAO,MAAQ,EAAO,MAAM,IAAI,EAAO,SAAS,IAAI,EAAI,SACxD,EAAO,OAAS,EAAO,gBAAkB,EAAI,SAHN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OADhC,QAAA,kBAAiB,EAmCvB,IAAM,EAAa,SAAkE,GAA/D,IAAA,EAAA,EAAA,MAAO,EAAA,EAAA,OAAQ,EAAA,EAAA,mBACtC,IAD0D,EAAA,MAExD,GAAsB,WAAtB,EAAO,MAAM,MAGX,GAFS,EAAO,SAAS,IAAI,GAAoB,OAE1C,EAAO,MAAM,OAAQ,YAE5B,IAAkE,IAAlE,EAAA,QAAQ,UAAU,EAAO,MAAM,SAAU,GAA4B,OAG7E,EAAO,MAAQ,EAAO,MAAM,IAAI,GAC1B,IAAA,EAAI,EAAmB,IAAI,EAAO,UACxC,EAAO,OAAS,EAAE,MAAM,IAZb,QAAA,WAAU;;ACnDV,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,gBAAA,EAPN,IAAM,EAAa,SAAC,GAClB,MAAA,CACL,IAAK,EAAM,OAAO,IAAI,EAAM,UAAU,IAAI,IAC1C,IAAK,EAAM,OAAO,IAAI,EAAM,UAAU,IAAI,MAHjC,QAAA,WAAU,EAOhB,IAAM,EAAgB,SAAC,EAAW,GAChC,OAAA,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAAK,EAAE,IAAI,GAD/E,QAAA,cAAa;;ACXb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAJb,IAAA,EAAA,QAAA,gBAEA,EAAA,QAAA,KAEa,EAA0C,SAAgB,GAEhE,IAFmD,IAAA,EAAA,EAAA,QAClD,EAA8D,GAC3D,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAC7B,IAAA,IAAI,EAAI,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACrC,IAAA,EAAI,EAAQ,GAAG,MACf,EAAI,EAAQ,GAAG,MACf,GAAO,EAAA,EAAA,YAAW,GAClB,GAAO,EAAA,EAAA,YAAW,GACpB,IAAA,EAAA,EAAA,eAAc,EAAM,GAAO,CACvB,IAAA,GAAU,EAAA,EAAA,WAAU,EAAQ,GAAI,EAAQ,IAC1C,GAAW,WAAX,EAAE,MAAgC,WAAX,EAAE,KAAmB,CACxC,IAAA,GAAS,EAAA,EAAA,uBAAsB,EAAG,IACzB,IAAX,GAAkB,EAAW,KAAK,EAAQ,SACzC,GACO,cAAX,EAAE,MAAmC,YAAX,EAAE,MACjB,cAAX,EAAE,MAAmC,YAAX,EAAE,KAIxB,GAAgB,cAAX,EAAE,MAAmC,YAAX,EAAE,MAAkC,WAAX,EAAE,MAG1D,GAAe,WAAX,EAAE,OAAiC,YAAX,EAAE,MAAiC,cAAX,EAAE,MAAuB,CAC9E,IAAA,GAAS,EAAA,EAAA,wBAAuB,EAAG,IACxB,IAAX,IACF,EAAS,EAAO,kBAChB,EAAW,KAAK,EAAQ,UAPwD,CAC5E,IAAA,GAAS,EAAA,EAAA,wBAAuB,EAAG,IAC1B,IAAX,GAAkB,EAAW,KAAK,EAAQ,QAL9C,CACM,IAAA,GAAS,EAAA,EAAA,yBAAwB,EAAG,IAC3B,IAAX,GAAkB,EAAW,KAAK,EAAQ,MAc/C,OAAA,GAhCI,QAAA,gBAAe;;ACO5B,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EATA,IAAA,EAAA,QAAA,KASa,EAAA,WAeC,SAAA,EAAA,GAAqB,EAAA,KAAA,GAP1B,KAAA,eAAiB,EAEjB,KAAA,QAAoC,GACpC,KAAA,YAAc,EAKd,KAAA,IAAM,EAAI,IACV,KAAA,IAAM,EAAI,IACV,KAAA,UAAY,EAAI,UAEf,IAAA,EAAO,KAAK,IAAI,IAAI,KAAK,KAC1B,KAAA,MAAQ,KAAK,MAAM,EAAK,EAAI,KAAK,WACjC,KAAA,OAAS,KAAK,MAAM,EAAK,EAAI,KAAK,WAClC,KAAA,WAAa,KAAK,MAAQ,KAAK,OAE/B,KAAA,KAAO,MAAM,KAAK,OAzB3B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA4BgB,MAAA,SAAA,GAWP,IAVC,IAAA,GAAM,EAAA,EAAA,YAAW,EAAI,OAErB,EAAkB,CACtB,IAAK,EAAI,IAAI,IAAI,KAAK,WAAW,IAAI,KAAK,OAC1C,IAAK,EAAI,IAAI,IAAI,KAAK,WAAW,IAAI,KAAK,QAGtC,EAAO,KAAK,IAAI,EAAQ,IAAI,EAAG,KAAK,MAAQ,GAC5C,EAAO,KAAK,IAAI,EAAQ,IAAI,EAAG,KAAK,OAAS,GAE1C,EAAI,EAAQ,IAAI,EAAG,GAAK,EAAM,IAAK,CACrC,KAAK,KAAK,KACR,KAAA,KAAK,GAAK,MAAM,KAAK,SAEvB,IAAA,IAAI,EAAI,EAAQ,IAAI,EAAG,GAAK,EAAM,IAChC,KAAK,KAAK,GAAG,KACX,KAAA,KAAK,GAAG,GAAK,GACb,KAAA,kBAEF,KAAA,KAAK,GAAG,GAAG,KAAK,MAhD7B,CAAA,IAAA,iBAqDuB,MAAA,WAGd,IAFC,IAAA,EAA8B,GAE3B,EAAI,EAAG,EAAI,KAAK,MAAO,IAC1B,GAAC,KAAK,KAAK,GAEV,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,OAAQ,IAC3B,GAAC,KAAK,KAAK,GAAG,GAIb,IAFC,IAAA,EAAO,KAAK,KAAK,GAAG,GAEjB,EAAI,EAAG,EAAI,EAAK,OAAQ,IAC1B,IAAA,IAAI,EAAI,EAAI,EAAG,EAAI,EAAK,OAAQ,IAAK,CAClC,IAAA,EAAI,EAAK,GACT,EAAI,EAAK,GAET,EAAc,GAAA,OAAA,EAAE,GAAM,KAAA,OAAA,EAAE,IACxB,EAAc,GAAA,OAAA,EAAE,GAAM,KAAA,OAAA,EAAE,IAI1B,GAFC,KAAA,aAAe,GAEf,KAAK,QAAQ,KAAc,KAAK,QAAQ,GAAW,CACjD,KAAA,QAAQ,IAAY,EACpB,KAAA,QAAQ,IAAY,EAEnB,IAAA,GAAO,EAAA,EAAA,YAAW,EAAE,OACpB,GAAO,EAAA,EAAA,YAAW,EAAE,QAEtB,EAAA,EAAA,eAAc,EAAM,KACL,IAAX,EAAE,MAAyB,IAAX,EAAE,MACtB,EAAQ,KAAK,CAAC,EAAG,MASxB,OAAA,MA5FX,EAAa,GAAb,QAAA,YAAA;;ACPa,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAJb,IAAA,EAAA,QAAA,gBAEA,EAAA,QAAA,KAEa,EAAiF,SAAC,GAC7F,IAEG,EAFH,EAAO,EAAP,QACG,EAAO,EAAA,EAFmF,CAAA,YAIvF,EAAO,IAAI,EAAA,YAAY,GACvB,EAA8D,GAElD,EAAA,EAAA,GAJf,IAIwB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAhB,IAAA,EAAgB,EAAA,MACzB,EAAK,OAAO,IALX,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAQG,IARH,EAUkB,EAAA,EAFL,EAAK,kBARlB,IAU2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAA,IAAA,EAAA,EAAA,EAAA,MAAA,GAAlB,EAAkB,EAAA,GAAf,EAAe,EAAA,GACtB,GAAU,EAAA,EAAA,WAAU,EAAG,GACzB,GAAiB,WAAjB,EAAE,MAAM,MAAsC,WAAjB,EAAE,MAAM,KAAmB,CACpD,IAAA,GAAS,EAAA,EAAA,uBAAsB,EAAE,MAAO,EAAE,QACjC,IAAX,GAAkB,EAAW,KAAK,EAAQ,SACzC,GACa,cAAjB,EAAE,MAAM,MAAyC,YAAjB,EAAE,MAAM,MACvB,cAAjB,EAAE,MAAM,MAAyC,YAAjB,EAAE,MAAM,KAIpC,GAAsB,cAAjB,EAAE,MAAM,MAAyC,YAAjB,EAAE,MAAM,MAAwC,WAAjB,EAAE,MAAM,MAG5E,GAAqB,WAAjB,EAAE,MAAM,OAAuC,YAAjB,EAAE,MAAM,MAAuC,cAAjB,EAAE,MAAM,MAAuB,CAChG,IAAA,GAAS,EAAA,EAAA,wBAAuB,EAAE,MAAO,EAAE,QAChC,IAAX,IACF,EAAS,EAAO,kBAChB,EAAW,KAAK,EAAQ,UAP0E,CAC9F,IAAA,GAAS,EAAA,EAAA,wBAAuB,EAAE,MAAO,EAAE,QAClC,IAAX,GAAkB,EAAW,KAAK,EAAQ,QAL9C,CACM,IAAA,GAAS,EAAA,EAAA,yBAAwB,EAAE,MAAO,EAAE,QACnC,IAAX,GAAkB,EAAW,KAAK,EAAQ,MApB/C,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAiCI,OAAA,GApCI,QAAA,eAAc;;ACDd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAHb,IAAA,EAAA,QAAA,gBAGa,EAAY,SAAC,EAAsB,GAAyB,OAAA,SAAC,GACjE,OAAA,IAAI,EAAA,cAAa,OAAA,OAAA,OAAA,OAAA,GACnB,GAAa,CAChB,EAAG,EACH,EAAG,OAJM,QAAA,UAAS;;ACYtB,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,cAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,EAAA,QAAA,UAAA,SACA,EAAA,QAAA,qBAAA,SACA,EAAA,QAAA,UAAA,SACA,EAAA,QAAA,oBAAA,SACA,EAAA,QAAA,WAAA;;ACkJgB,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,cAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAjKhB,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAEA,EAAA,QAAA,WACA,EAAA,QAAA,iBAEA,EAAA,QAAA,WAAA,SAmFa,IAAA,EAAA,WA0EC,SAAA,EAAA,GAAuB,IAAA,EAAA,KAAA,EAAA,KAAA,GAjB3B,KAAA,cAAgB,EAEhB,KAAA,SAAU,EAEV,KAAA,KAAO,CACb,QAAS,EACT,QAAS,EACT,SAAU,EACV,IAAK,GAUA,KAAA,QAAU,EAAI,QACD,IAFe,EAEf,EAAA,EAAA,KAAK,SAFU,IAED,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAA,EAAA,MAC1B,GAAK,KAAK,cACT,KAAA,iBAJ0B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAO5B,KAAA,MAAQ,EAAI,MACZ,KAAA,OAAS,EAAI,OAEd,EAAI,YAAiC,UAAnB,EAAI,WACnB,KAAA,mBAAqB,EAAA,gBAErB,KAAA,mBAAqB,SAAC,GACzB,OAAA,EAAA,EAAA,gBAAc,OAAA,OAAA,CACZ,IAAK,IAAI,EAAA,MAAM,EAAG,GAClB,IAAK,IAAI,EAAA,MAAM,EAAK,MAAO,EAAK,QAChC,UAAW,EAAI,UAAY,IACxB,KAIL,EAAI,qBACD,KAAA,qBAAuB,EAAI,0BACM,IAA7B,EAAI,uBACR,KAAA,qBAAuB,CAAE,WAAY,GAAI,KAAM,KAGjD,KAAA,IAAM,EAAI,KAAO,GACjB,KAAA,2BAA6B,IAAO,KAAK,IACzC,KAAA,sBAAwB,EAAI,KAAK,IACjC,KAAA,GAAK,KAAK,sBAET,IAAA,EAAU,EAAI,SAAW,IACzB,GAAW,EAAA,EAAA,gBAAe,GAE3B,KAAA,eAAiB,EAAI,gBAAkB,CAAC,EAAA,YAAa,GACrD,KAAA,gBAAkB,EAAI,gBAAkB,GAExC,KAAA,SAAW,EAAI,SAEf,KAAA,kBAAoB,EAAI,kBACxB,KAAA,gBAAkB,EAAI,gBA5Cf,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,mBA+CU,MAAA,SAAA,GACjB,KAAA,eAAe,KAAK,KAhDb,CAAA,IAAA,oBAmDW,MAAA,SAAA,GAClB,KAAA,gBAAgB,KAAK,KApDd,CAAA,IAAA,YA2DG,MAAA,SAAA,GACf,EAAO,GAAK,KAAK,cACZ,KAAA,gBACA,KAAA,QAAQ,KAAK,KA9DN,CAAA,IAAA,eAiEM,MAAA,SAAA,GACb,KAAA,QAAU,KAAK,QAAQ,OAAO,SAAC,GAAM,OAAA,EAAE,KAAO,MAlEvC,CAAA,IAAA,QAqEF,MAAA,WACL,KAAA,SAAU,EACV,KAAA,SAvEO,CAAA,IAAA,OAyEH,MAAA,WACJ,KAAA,SAAU,EACV,KAAA,KAAO,CACV,QAAS,EACT,QAAS,EACT,SAAU,EACV,IAAK,KA/EK,CAAA,IAAA,OAmFF,MAAA,WAAA,IAAA,EAAA,KACN,GAAC,KAAK,QAAN,CAEE,IAAA,EAAM,KAAK,MAiBV,IAfoB,IAAvB,KAAK,KAAK,WACP,KAAA,KAAK,SAAW,GAGvB,sBAAsB,WACpB,EAAK,SAGF,KAAA,KAAK,QAAU,EACf,KAAA,KAAK,QAAU,KAAK,KAAK,QAAU,KAAK,KAAK,SAC7C,KAAA,KAAK,SAAW,KAAK,KAAK,QAC1B,KAAA,KAAK,KAAO,KAAK,KAAK,QAEvB,KAAK,UAAU,KAAK,SAAS,MAE1B,KAAK,KAAK,KAAO,KAAK,4BAA4B,CAClD,KAAA,KAAK,KAAO,KAAK,2BAEA,IAHiC,EAGjC,EAAA,EAAA,KAAK,gBAH4B,IAGZ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EACzC,EADyC,EAAA,OACjC,OAJ6C,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAOlD,KAAA,oBAEA,KAAA,OAAO,KAAK,uBAEM,IAXgC,EAWhC,EAAA,EAAA,KAAK,iBAX2B,IAWV,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAC3C,EAD2C,EAAA,OAClC,OAZ4C,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,SAvG7C,CAAA,IAAA,SA4HA,MAAA,SAAA,GACS,IADC,EACD,EAAA,EAAA,KAAK,SADJ,IACa,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAA,EAAA,MAC1B,OAAO,IAFM,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OA5HV,CAAA,IAAA,oBAqIU,MAAA,WAAA,IAAA,EAAA,KAChB,EAAa,WACX,IADgB,EAEE,EAAA,EADL,EAAK,mBAAmB,CAAE,QAAS,EAAK,WADrC,IAEc,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAzB,IAAA,EAAyB,EAAA,MAC9B,GAAA,EAAK,kBAEH,IADQ,EAAK,kBAAkB,GAEjC,UAGJ,EAAA,EAAA,kBAAiB,EAAW,EAAK,sBAC7B,EAAK,iBAAiB,EAAK,gBAAgB,IAV3B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAcpB,KAAK,qBACP,QArJU,EAxEH,GAAb,QAAA,cAAA,EAwEgB,EAAA,QAAU,IAAI,EAAA,MAAM,EAAG;;AC/GvC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAlDA,IAAA,EAAA,QAAA,SAkDa,EAAA,WAiFC,SAAA,EAAA,GAA+B,EAAA,KAAA,GA7EpC,KAAA,IAAM,EAON,KAAA,MAAQ,IAAI,EAAA,MAAM,EAAG,GAKrB,KAAA,aAAe,IAAI,EAAA,MAAM,EAAG,GAuB5B,KAAA,OAAS,EAKT,KAAA,oBAAsB,EAsCtB,KAAA,MAAQ,EAAI,MACZ,KAAA,SAAW,KAAK,MAAM,OACtB,KAAA,MAAQ,KAAK,MAAM,MAEnB,KAAA,SAAW,EAAI,iBAAmB,IAAI,EAAA,MAAM,EAAG,GAC/C,KAAA,gBAAkB,EAAI,wBAA0B,EAEhD,KAAA,KAAO,EAAI,KACE,IAAd,KAAK,KACF,KAAA,QAAU,EAAI,KAAK,KAEnB,KAAA,QAAU,OAGM,IAAnB,EAAI,WACD,KAAA,WAAa,EAAI,WAEjB,KAAA,WAA2B,IAAd,KAAK,KAGpB,KAAA,SAAW,EAAI,UAAY,GAC3B,KAAA,YAAc,EAAI,aAAe,GAEpB,IAAd,KAAK,MACF,KAAA,QAAU,KAAK,MAAM,WAAW,KAAK,MACrC,KAAA,WAAa,EAAI,KAAK,UAEtB,KAAA,QAAU,EACV,KAAA,WAAa,GAGf,KAAA,gBAAkB,EAAI,gBAjH/B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAwHgB,MAAA,SAAA,GACN,IAAA,EAAc,KAAK,SAAS,IAAI,KAAK,SAAS,IAAI,GAAI,IAAI,KAAK,aAAa,IAAc,GAAV,KAAA,IAAA,EAAM,MAEtF,EAAkB,KAAK,MAAM,IAAI,KAAK,SACtC,EAAc,KAAK,SAAS,IAAI,KAAK,aAAa,IAAI,GAAiB,IAAS,GAAL,IAE3E,EAAW,EAAY,IAAI,KAAK,UACjC,KAAA,KAAK,GACL,KAAA,aAAe,EACf,KAAA,SAAW,EAIX,KAAA,MAAQ,IAAI,EAAA,MAAM,EAAG,GAEpB,IAAA,EAAW,KAAK,MAAQ,KAAK,gBAAkB,EAAK,KAAK,qBAAiC,GAAV,KAAA,IAAA,EAAM,IAEtF,EAAyB,KAAK,OAAS,KAAK,WAC5C,EAAqB,KAAK,iBAAmB,KAAK,oBAAsB,IAAgC,GAAL,GAEnG,EAAW,EAAW,KAAK,MAC5B,KAAA,OAAO,GACP,KAAA,oBAAsB,EACtB,KAAA,gBAAkB,EAIlB,KAAA,OAAS,IAnJlB,CAAA,IAAA,OAyJc,MAAA,SAAA,GACL,KAAA,MAAM,KAAK,GACX,KAAA,SAAW,KAAK,SAAS,IAAI,KA3JtC,CAAA,IAAA,SAiKgB,MAAA,SAAA,GACP,KAAA,OAAS,EACT,KAAA,MAAM,OAAO,KAnKtB,CAAA,IAAA,OAsKa,MAAA,WACH,IAAA,EAAO,IAAI,EAAe,CAC9B,KAAM,KAAK,KACX,MAAO,KAAK,MAAM,OAClB,gBAAiB,KAAK,gBACtB,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,uBAAwB,KAAK,gBAC7B,gBAAiB,KAAK,SACtB,YAAa,KAAK,cAKb,OAHP,EAAK,MAAQ,KAAK,MAClB,EAAK,OAAS,KAAK,OAEZ,MApLX,EAAa,GAAb,QAAA,eAAA;;ACxCA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAVA,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,KASa,EAAA,SAAA,GAAb,EAAA,EAAuC,EAAA,gBAAvC,IAAA,EAAA,EAAA,GAcc,SAAA,EAAA,GAA2B,IAAA,EAOjC,GAPiC,EAAA,KAAA,IAChC,EAAA,EAAA,KAAA,KAAA,OAAA,OAAA,OAAA,OAAA,GAAM,GAAG,CAAE,OAAQ,IAAI,EAAA,MAAM,EAAG,OAHhC,KAAO,UAKP,EAAA,SAAW,EAAI,SAEL,EAAA,QAAQ,kBAAkB,EAAK,UAEnC,KAAK,SAAC,GAAM,OAAA,EAAI,KAAK,KACxB,MAAA,IAAI,MAAM,8BAOd,GAJC,EAAA,OAAS,EAAA,QAAQ,YAAY,EAAK,UAClC,EAAA,QAAU,EAAA,QAAQ,WAAW,EAAK,UAClC,EAAA,UAAY,EAAkB,YAAY,EAAK,UAEjC,IAAf,EAAK,MAAa,CACd,IAAA,EAAQ,EAAK,MACd,EAAA,MAAQ,EACR,EAAA,OAAO,GAlBuB,OAAA,EAdzC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA8Ec,MAAA,SAAA,GACL,KAAA,OAAS,KAAK,OAAO,IAAI,GACzB,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IACnC,KAAA,SAAS,GAAK,KAAK,SAAS,GAAG,IAAI,KAjF9C,CAAA,IAAA,SAqFgB,MAAA,SAAA,GACP,KAAA,OAAS,EACT,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IACnC,KAAA,SAAS,GAAK,KAAK,SAAS,GAAG,aAAa,KAAK,OAAQ,GAE3D,KAAA,QAAU,EAAA,QAAQ,WAAW,KAAK,YA1F3C,CAAA,IAAA,aA6FoB,MAAA,SAAA,GACT,OAAA,EAAA,QAAQ,mBAAmB,KAAK,SAAU,KA9FrD,CAAA,IAAA,UAiGgB,MAAA,WACL,OAAA,EAAA,QAAQ,QAAQ,KAAK,YAlGhC,CAAA,IAAA,OAqGa,MAAA,WACF,OAAA,IAAI,EAAkB,CAC3B,MAAO,KAAK,MACZ,SAAU,KAAK,aAxGrB,CAAA,IAAA,gBA4GuB,MAAA,SAAA,GAEd,IADD,IAAA,EAAa,KAAK,SAAS,GACtB,EAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IAAK,CACvC,IAAA,EAAS,KAAK,SAAS,GACzB,EAAW,IAAI,GAAK,EAAO,IAAI,KACjC,EAAa,GAGV,OAAA,KApHX,CAAA,CAAA,IAAA,aAuC2B,MAAA,SAAA,GAChB,OAAA,IAAI,EAAiB,OAAA,OAAA,OAAA,OAAA,GACvB,GAAG,CACN,SAAU,EAAI,SAAS,IAAI,SAAC,GAAM,OAAA,EAAE,IAAI,EAAI,eA1ClD,CAAA,IAAA,cA8C4B,MAAA,SAAA,GAClB,IADmC,EACnC,EAAQ,CACZ,IAAK,EAAA,EACL,KAAM,EAAA,GAEF,EAAS,CACb,IAAK,EAAA,EACL,KAAM,EAAA,GAGF,EAAQ,IAAI,EAAA,MAAM,EAAG,GACrB,EAAQ,IAAI,EAAA,MAAM,EAAG,GACN,EAAA,EAAA,GAZoB,IAYV,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAApB,IAAA,EAAoB,EAAA,MACvB,EAAO,EAAO,IAAI,GACpB,EAAO,EAAM,MACf,EAAM,IAAM,GAEV,EAAO,EAAM,MACf,EAAM,IAAM,GAER,IAAA,EAAO,EAAO,IAAI,GACpB,EAAO,EAAO,MAChB,EAAO,IAAM,GAEX,EAAO,EAAO,MAChB,EAAO,IAAM,IAzBwB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IA6BlC,OAAA,IAAI,EAAA,MAAM,EAAM,IAAM,EAAM,IAAK,EAAO,IAAM,EAAO,SA3EhE,EAAa,GAAb,QAAA,kBAAA;;ACKA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,yBAAA,EAfA,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,KACA,EAAA,QAAA,aAaa,EAAA,SAAA,GAAb,EAAA,EAAyC,EAAA,gBAAzC,IAAA,EAAA,EAAA,GAsBc,SAAA,EAAA,GAA6B,IAAA,EAuBnC,GAvBmC,EAAA,KAAA,IACjC,EAAA,EAAA,KAAA,KAAA,IAHD,KAAO,YAIP,EAAA,MAAQ,EAAI,MACZ,EAAA,OAAS,EAAI,OAEb,EAAA,UAAY,IAAI,EAAA,MAAM,EAAK,MAAO,EAAK,QASvC,EAAA,SAAW,CACd,EAAK,OAAO,KAAK,EAAK,MAAQ,GAAI,EAAK,OAAS,GAChD,EAAK,OAAO,IAAI,EAAK,MAAQ,GAAI,EAAK,OAAS,GAC/C,EAAK,OAAO,IAAI,EAAK,MAAQ,EAAG,EAAK,OAAS,GAC9C,EAAK,OAAO,KAAK,EAAK,MAAQ,EAAG,EAAK,OAAS,IAG5C,EAAA,QAAU,EAAoB,cAAc,EAAK,UAEnC,IAAf,EAAK,MAAa,CACd,IAAA,EAAQ,EAAK,MACd,EAAA,MAAQ,EACR,EAAA,OAAO,GA1ByB,OAAA,EAtB3C,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA8Dc,MAAA,SAAA,GACL,KAAA,OAAS,KAAK,OAAO,IAAI,GACzB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAChB,KAAA,SAAS,GAAK,KAAK,SAAS,GAAG,IAAI,KAjE9C,CAAA,IAAA,SAqEgB,MAAA,SAAA,GACP,KAAA,OAAS,EACT,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IAChB,KAAA,SAAS,GAAK,KAAK,SAAS,GAAG,aAAa,KAAK,OAAQ,GAE3D,KAAA,QAAU,EAAoB,cAAc,KAAK,UACjD,KAAA,UAAY,EAAA,kBAAkB,YAAY,KAAK,YA3ExD,CAAA,IAAA,aA8EoB,MAAA,SAAA,GACZ,OAAS,IAAT,EAAmB,EACf,GAAQ,KAAA,IAAA,KAAK,MAAS,GAAI,KAAA,IAAA,KAAK,OAAU,IAAM,KAhF3D,CAAA,IAAA,UAmFgB,MAAA,WACL,OAAA,KAAK,MAAQ,KAAK,SApF7B,CAAA,IAAA,OAuFa,MAAA,WACF,OAAA,IAAI,EAAoB,CAC7B,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,OAAQ,KAAK,OACb,MAAO,KAAK,UA5FlB,CAAA,IAAA,gBAgGuB,MAAA,SAAA,GAEd,IADD,IAAA,EAAa,KAAK,SAAS,GACtB,EAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IAAK,CACvC,IAAA,EAAS,KAAK,SAAS,GACzB,EAAW,IAAI,GAAK,EAAO,IAAI,KACjC,EAAa,GAGV,OAAA,KAxGX,CAAA,CAAA,IAAA,gBAoD+B,MAAA,SAAA,GAEtB,IADC,IAAA,EAAU,GACP,EAAI,EAAG,EAAI,EAAG,IAAK,CACpB,IAAA,EAAU,IAAN,EAAU,EAAI,EAAI,EACtB,EAAU,IAAN,EAAU,EAAI,EAAI,EAC5B,EAAQ,KAAK,EAAS,GAAG,IAAI,EAAS,IAAI,aAErC,OAAA,MA3DX,EAAa,GAAb,QAAA,oBAAA;;ACLA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,KAAA,UAAA,SAAA,KAAA,QAAA,UAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAVA,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,KASa,EAAA,SAAA,GAAb,EAAA,EAAsC,EAAA,gBAAtC,IAAA,EAAA,EAAA,GAec,SAAA,EAAA,GAA0B,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9B,EAAA,EAAA,KAAA,KAAA,IAHD,KAAO,SAKP,EAAA,OAAS,EAAI,OACb,EAAA,UAAY,IAAI,EAAA,MAAoB,EAAd,EAAK,OAA0B,EAAd,EAAK,QAC5C,EAAA,UAAY,EAAK,OAAO,IAAI,EAAK,OAAQ,GALV,EAfxC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAuBc,MAAA,SAAA,GACL,KAAA,OAAS,KAAK,OAAO,IAAI,GACzB,KAAA,UAAY,KAAK,UAAU,IAAI,KAzBxC,CAAA,IAAA,SA4BgB,MAAA,SAAA,GACP,KAAA,OAAS,EACT,KAAA,UAAY,KAAK,UAAU,aAAa,KAAK,OAAQ,KA9B9D,CAAA,IAAA,aAiCoB,MAAA,SAAA,GACZ,OAAS,IAAT,EAAmB,EACf,EAAO,KAAA,IAAA,KAAK,OAAU,GAAK,KAnCvC,CAAA,IAAA,UAsCgB,MAAA,WACL,OAAA,KAAK,GAAK,KAAA,IAAA,KAAK,OAAU,KAvCpC,CAAA,IAAA,OA0Ca,MAAA,WACF,OAAA,IAAI,EAAiB,CAC1B,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,OAAQ,KAAK,WA9CnB,CAAA,IAAA,gBAkDuB,MAAA,SAAA,GACZ,OAAA,KAAK,OAAO,IAAI,EAAE,IAAI,KAAK,aAnDtC,EAAa,GAAb,QAAA,iBAAA;;ACkEA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,cAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAxDsB,IAAA,EAmBpB,SAAY,EAAA,GAAwB,EAAA,KAAA,GAC7B,KAAA,OAAS,EAAI,OACb,KAAA,MAAQ,EAAI,OArBrB,QAAA,eAAA,EAsDA,EAAA,QAAA,eAAA,SACA,EAAA,QAAA,YAAA,SACA,EAAA,QAAA,aAAA;;ACnEA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAa,IAAA,EAAA,WAIC,SAAA,EAAA,GAAmB,EAAA,KAAA,GACxB,KAAA,OAAS,EAAI,OACb,KAAA,OAAS,EAAI,OANtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UASkB,MAAA,SAAA,EAAkD,EAAe,GAAmB,IAAA,EAAA,KAC5F,EAAW,EAAQ,SAAS,IAAI,SAAC,GAAM,OAAA,EAAE,IAAI,EAAK,UAClD,EAAS,EAAQ,OAAO,IAAI,KAAK,QAEjC,EAAc,KAAK,OAAO,UAAU,CAAE,MAAA,IACtC,EAAgB,KAAK,OAAO,UAAU,CAC1C,MAAO,EAAa,MAAQ,QAC5B,QAAQ,EACR,UAAW,EAAa,EAAM,IAEhC,EAAY,QACZ,EAAY,GAAG,EAAS,GAAG,EAAG,EAAS,GAAG,GAC1C,EAAc,QACd,EAAc,GAAG,EAAS,GAAG,EAAG,EAAS,GAAG,GAEvC,IAAA,IAAI,EAAI,EAAG,EAAI,EAAS,OAAQ,IAAK,CAClC,IAAA,EAAI,EAAS,GACnB,EAAY,KAAK,EAAE,EAAG,EAAE,GACxB,EAAc,KAAK,EAAE,EAAG,EAAE,GAG5B,EAAY,OACZ,EAAc,OAET,KAAA,OAAO,OAAO,CACjB,EAAG,EAAO,EACV,EAAG,EAAO,EACV,OAAQ,EACR,MAAO,EAAa,MAAQ,QAC5B,UAAW,EAAa,EAAM,MAtCpC,CAAA,IAAA,SA0CiB,MAAA,SAAA,EAA0B,EAAe,GAChD,IAAA,EAAS,EAAO,OAAO,IAAI,KAAK,QAChC,EAAS,EAAO,OAAS,KAAK,OAE/B,KAAA,OAAO,OAAO,CACjB,MAAA,EACA,OAAA,EACA,EAAG,EAAO,EACV,EAAG,EAAO,IAEP,KAAA,OAAO,OAAO,CACjB,MAAO,EAAa,MAAQ,QAC5B,OAAA,EACA,QAAQ,EACR,EAAG,EAAO,EACV,EAAG,EAAO,EACV,UAAW,EAAa,EAAM,IAE3B,KAAA,OAAO,OAAO,CACjB,MAAO,EAAa,MAAQ,QAC5B,OAAQ,EACR,EAAG,EAAO,EACV,EAAG,EAAO,EACV,UAAW,EAAa,EAAM,MAjEpC,CAAA,IAAA,OAqEc,MAAA,SAAA,EAAwB,EAAe,GACvB,WAAtB,EAAO,MAAM,KACV,KAAA,OAAO,EAAO,MAAO,EAAO,GAE5B,KAAA,QAAQ,EAAO,MAAO,EAAO,OAzExC,EAAa,GAAb,QAAA,QAAA;;ACKA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAdA,IAAA,EAAA,QAAA,SAEA,EAAA,QAAA,iBAYa,EAAA,WASC,SAAA,EAAA,GAAwB,IAAA,EAAA,KAAA,EAAA,KAAA,GAC7B,KAAA,OAAS,EAAI,OACb,KAAA,OAAS,EAAI,OACb,KAAA,MAAQ,EAAI,MACZ,KAAA,KAAO,EAAI,KACX,KAAA,OAAS,EAAI,OAEb,KAAA,MAAM,iBAAiB,SAAC,GACvB,GAAW,eAAX,EAAE,MAAyB,EAAK,WAClC,EAAK,gBAAa,OAIhB,GAAC,EAAK,KAAK,WAAX,CACE,IAAA,EAAS,EAAK,OAAO,QAAQ,KAAK,SAAC,GAAM,OAAA,EAAE,KAAO,EAAK,KAAK,aAC9D,GAAC,GAA0B,IAAhB,EAAO,KAElB,IAAC,EAAK,YAAyB,cAAX,EAAE,MAAqC,IAAb,EAAE,QAAgB,EAAK,MAAM,SAAU,CACjF,IAAA,EAAiB,EAAK,MAAM,SAAS,IAAI,EAAK,QAEhD,GAAsB,WAAtB,EAAO,MAAM,MAGX,GAFS,EAAO,SAAS,IAAI,GAAgB,OAEtC,EAAO,MAAM,OAAQ,YAE5B,IAA8D,IAA9D,EAAA,QAAQ,UAAU,EAAO,MAAM,SAAU,GAAwB,OAGvE,EAAK,KAAK,QACV,EAAK,WAAa,EAAK,MAAM,cACxB,GAAe,YAAX,EAAE,MAAmC,IAAb,EAAE,QAAgB,EAAK,YAAc,EAAK,MAAM,SAAU,CACrF,IAAA,EAAQ,EAAK,WAAW,IAAI,EAAK,MAAM,UAAU,IAAI,IAE3D,EAAA,WAAW,CACT,MAAA,EACA,OAAA,EACA,mBAAoB,EAAK,WAAW,IAAI,EAAK,UAG/C,EAAK,KAAK,OACV,EAAK,gBAAa,MAjD1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAsDM,MAAA,WACE,KAAK,YAAc,KAAK,MAAM,WAC3B,KAAA,OAAO,KAAK,CACf,GAAI,KAAK,WAAW,EACpB,GAAI,KAAK,WAAW,EACpB,GAAI,KAAK,MAAM,SAAS,EACxB,GAAI,KAAK,MAAM,SAAS,EACxB,MAAO,QACP,UAAW,IAER,KAAA,OAAO,KAAK,CACf,GAAI,KAAK,WAAW,EACpB,GAAI,KAAK,WAAW,EACpB,GAAI,KAAK,MAAM,SAAS,EACxB,GAAI,KAAK,MAAM,SAAS,EACxB,MAAO,QACP,UAAW,SAtEnB,EAAa,GAAb,QAAA,aAAA;;ACOA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EArBA,IAAA,EAAA,QAAA,SAMM,EAAgB,SAAC,GACf,IAAA,EAAK,SAAS,eAAe,GAC/B,IAAC,EAAI,MAAM,IAAI,MAAY,KAAA,OAAA,EAAtB,yBAEF,OAAA,SAAC,GACN,EAAG,YAAc,IAUR,EAAA,WAwBC,SAAA,EAAA,GAAgB,IAAA,EAAA,KAAA,EAAA,KAAA,GAtBrB,KAAA,QAAS,EAMR,KAAA,GAAK,EAiBN,KAAA,OAAS,EAAI,OACb,KAAA,MAAQ,EAAI,MACZ,KAAA,OAAS,EAAI,OAEZ,IAAA,EAAO,SAAS,eAAe,QACjC,IAAC,EAAM,MAAM,IAAI,MAAM,8BACtB,KAAA,OAAS,EAET,KAAA,YAAc,CACjB,MAAO,EAAc,SACrB,gBAAiB,EAAc,oBAC/B,gBAAiB,EAAc,oBAC/B,SAAU,EAAc,YACxB,GAAI,EAAc,MAClB,KAAM,EAAc,QACpB,gBAAiB,EAAc,qBAC/B,SAAU,EAAc,YACxB,YAAa,EAAc,eAC3B,UAAW,EAAc,cACzB,SAAU,EAAc,aAGrB,KAAA,MAAM,iBAAiB,SAAC,GACvB,GAAW,cAAX,EAAE,OAAsC,IAAb,EAAE,QAA6B,IAAb,EAAE,SAAiB,EAAK,MAAM,SAAU,CAIlF,IAHC,IAAA,EAAQ,EAAK,MAAM,SAAS,IAAI,EAAK,QAEvC,OAAU,EACL,EAAI,EAAG,EAAI,EAAK,OAAO,QAAQ,OAAQ,IAAK,CAC7C,IAAA,EAAM,EAAK,OAAO,QAAQ,GAE5B,GAAmB,WAAnB,EAAI,MAAM,MAGR,GAFS,EAAI,SAAS,IAAI,GAAO,QAEzB,EAAI,MAAM,OAAQ,CAC5B,EAAU,EACV,YAIE,IAAS,IADD,EAAA,QAAQ,UAAU,EAAI,MAAM,SAAU,GAClC,CACd,EAAU,EACV,OAKF,QAAY,IAAZ,EAAuB,CACzB,EAAK,EAAI,EACH,IAAA,EAAQ,EAAK,OAAO,QAAQ,GAAS,GACvC,EAAK,aAAe,GAAsB,IAAb,EAAE,OACjC,EAAK,gBAAa,EAElB,EAAK,WAAa,MAM1B,OAAO,iBAAiB,UAAW,SAAC,GACpB,MAAV,EAAE,KACJ,EAAK,WArFb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA0Fa,MAAA,WACJ,KAAA,QAAS,EACT,KAAA,OAAO,UA5FhB,CAAA,IAAA,QA8Fc,MAAA,WACL,KAAA,QAAS,EACT,KAAA,OAAO,SAhGhB,CAAA,IAAA,SAkGe,MAAA,WACP,KAAK,OACF,KAAA,OAEA,KAAA,UAtGX,CAAA,IAAA,WA0GiB,MAAA,WACR,KAAA,IACD,KAAK,EAAI,IACN,KAAA,EAAI,KAAK,OAAO,QAAQ,OAAS,GAEnC,KAAA,WAAa,KAAK,OAAO,QAAQ,KAAK,GAAG,KA/GlD,CAAA,IAAA,OAiHa,MAAA,WACJ,KAAA,IACD,KAAK,EAAI,KAAK,OAAO,QAAQ,OAAS,IACnC,KAAA,EAAI,GAEN,KAAA,WAAa,KAAK,OAAO,QAAQ,KAAK,GAAG,KAtHlD,CAAA,IAAA,WAwHiB,MAAA,WACR,KAAA,GAAK,EACL,KAAA,gBAAa,IA1HtB,CAAA,IAAA,SA6HgB,MAAA,SAAA,GACP,IAAA,IAAI,EAAI,EAAG,EAAI,KAAK,OAAO,QAAQ,OAAQ,IAAK,CAE/C,GADM,KAAK,OAAO,QAAQ,GACxB,KAAO,EAGX,OAFK,KAAA,EAAI,OACJ,KAAA,WAAa,MAlI1B,CAAA,IAAA,aAwImB,MAAA,WAAA,IAAA,EAAA,KACX,QAAoB,IAApB,KAAK,WAAL,CAIE,IAAA,EAAM,KAAK,OAAO,QAAQ,KAAK,SAAC,GAAM,OAAA,EAAE,KAAO,EAAK,aACtD,IAAC,EAIH,OAHK,KAAA,gBAAa,EACb,KAAA,OAAO,MAAM,QAAU,YACvB,KAAA,GAAK,GAIsB,SAA9B,KAAK,OAAO,MAAM,UACf,KAAA,OAAO,MAAM,QAAU,SAKzB,KAAA,YAAY,GAAG,EAAI,GAAG,YACtB,KAAA,YAAY,UAAU,EAAI,MAAM,MAChC,KAAA,YAAY,KAAK,EAAI,KAAK,QAJV,IAKhB,KAAA,YAAY,gBAAgB,EAAI,QAAQ,QALxB,IAMhB,KAAA,YAAY,SAAS,EAAI,SAAS,QANlB,IAOhB,KAAA,YAAY,YAAY,EAAI,YAAY,QAPxB,IAQhB,KAAA,YAAY,gBAAgB,EAAI,gBAAkB,EAAI,gBAAgB,QARtD,GAQ8E,QAC9F,KAAA,YAAY,SAAa,IAAA,OAAA,EAAI,SAAS,EAAE,QATxB,GASiD,KAAA,OAAA,EAAI,SAAS,EAAE,QAThE,GASrB,MACK,KAAA,YAAY,SAAa,IAAA,OAAA,EAAI,SAAS,EAAE,QAVxB,GAUiD,KAAA,OAAA,EAAI,SAAS,EAAE,QAVhE,GAUrB,MACK,KAAA,YAAY,OAAqB,IAAZ,EAAI,MAAe,KAAK,GAAM,KAAK,QAAQ,IAChE,KAAA,YAAY,iBAAwC,IAAtB,EAAI,gBAAyB,KAAK,IAAI,QAAQ,SA3B1E,KAAA,OAAO,MAAM,QAAU,WA1IlC,EAAa,GAAb,QAAA,KAAA;;ACdA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAPA,IAAA,EAAA,QAAA,SAOa,EAAA,WAOC,SAAA,EAAA,GAAiB,IAAA,EAAA,KAAA,EAAA,KAAA,GAFrB,KAAA,eAA8C,GAyC9C,KAAA,iBAAmB,SAAC,GAC1B,EAAK,SAAW,IAAI,EAAA,MAClB,EAAE,SAAW,EAAK,OAAO,SAAS,WAAa,OAAO,aACtD,EAAE,SAAW,EAAK,OAAO,SAAS,UAAY,OAAO,cAEhC,IALoB,EAKpB,EAAA,EAAA,EAAK,gBALe,IAKC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAC1C,EAD0C,EAAA,OACjC,IANgC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAtCtC,KAAA,OAAS,EAAI,OAEb,KAAA,OAAO,SAAS,iBAAiB,YAAa,SAAC,GAG1C,OAFR,EAAK,iBAAiB,GAEd,EAAE,QACH,KAAA,EACH,EAAK,OAAS,OACd,MACG,KAAA,EACH,EAAK,OAAS,SACd,MACG,KAAA,EACH,EAAK,OAAS,WAIf,KAAA,OAAO,SAAS,iBAAiB,aAAc,SAAC,GACnD,EAAK,cAAW,EAChB,EAAK,YAAS,EAES,IAJiC,EAIjC,EAAA,EAAA,EAAK,gBAJ4B,IAIZ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAC1C,EAD0C,EAAA,OACjC,IAL6C,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OAQrD,KAAA,OAAO,SAAS,iBAAiB,YAAa,SAAC,GAClD,EAAK,iBAAiB,KAEnB,KAAA,OAAO,SAAS,iBAAiB,UAAW,SAAC,GAChD,EAAK,iBAAiB,GACtB,EAAK,YAAS,IAtCpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,mBA0C0B,MAAA,SAAA,GACjB,KAAA,eAAe,KAAK,OA3C7B,EAAa,GAAb,QAAA,MAAA;;AC0MA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7MA,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,UACA,EAAA,QAAA,iBACA,EAAA,QAAA,kBACA,EAAA,QAAA,iBACA,EAAA,QAAA,aACA,EAAA,QAAA,kBACA,EAAA,QAAA,UACA,EAAA,QAAA,WAEM,EAAS,EAAA,aAAa,CAC1B,MAAO,KACP,OAAQ,MAEV,EAAO,aACP,EAAO,MAAM,aAAc,EAC3B,EAAO,MAAM,gBAAiB,EAE9B,IAAM,EAAS,GACT,EAAQ,CAAE,MAAO,EAAO,MAAQ,EAAQ,OAAQ,EAAO,OAAS,GAEhE,EAAU,IAAI,EAAA,QAAQ,CAAE,OAAA,EAAQ,OAAA,IAChC,EAAQ,IAAI,EAAA,MAAM,CAAE,OAAA,IAEpB,EAAO,SAAS,eAAe,QACjC,IACF,EAAK,UAAY,GACjB,EAAK,YAAY,EAAO,WAG1B,IAAM,EAAS,IAAI,EAAA,eAAe,CAEhC,KAAM,EACN,MAAO,IAAI,EAAA,oBAAoB,CAC7B,MAAO,EACP,OAAQ,IAAI,EAAA,MAAM,EAAM,MAAQ,EAAG,EAAM,OAAS,GAClD,MAAO,EAAM,MACb,OAAQ,MAIN,EAAW,IAAI,EAAA,eAAe,CAElC,KAAM,EACN,MAAO,IAAI,EAAA,oBAAoB,CAC7B,MAAO,KAAK,GAAK,GACjB,OAAQ,IAAI,EAAA,MAAM,GAAI,EAAM,OAAS,GACrC,MAAO,GACP,OAAQ,MAIN,EAAO,IAAI,EAAA,eAAe,CAE9B,KAAM,EACN,MAAO,IAAI,EAAA,oBAAoB,CAC7B,MAAO,EACP,OAAQ,IAAI,EAAA,MAAM,EAAM,MAAQ,EAAG,EAAM,OAAS,EAAI,IACtD,MAAO,EACP,OAAQ,OAIN,EAAO,IAAI,EAAA,eAAe,CAE9B,KAAM,EACN,MAAO,IAAI,EAAA,oBAAoB,CAC7B,OAAQ,KAAK,GAAK,GAClB,OAAQ,IAAI,EAAA,MAAM,EAAM,MAAQ,GAAI,IACpC,MAAO,GACP,OAAQ,MAIN,EAAc,IAAI,EAAA,eAAe,CACrC,KAAM,EACN,MAAO,IAAI,EAAA,iBAAiB,CAC1B,MAAO,EACP,OAAQ,IAAI,EAAA,MAAM,EAAM,MAAQ,EAAG,GACnC,OAAQ,MAIN,EAAkB,CAAC,EAAQ,EAAa,EAAU,EAAM,GAE9D,OAAO,iBAAiB,UAAW,SAAC,GAC9B,GAAU,MAAV,EAAE,IAAa,CACC,IADD,EACC,EAAA,EAAA,EAAO,SADR,IACiB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAvB,IAAA,EAAuB,EAAA,MAChC,EAAO,aAAa,EAAI,KAFT,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAIC,IAJD,EAIC,EAAA,EAAA,EAAgB,IAAI,SAAC,GAAM,OAAA,EAAE,UAJ9B,IAIuC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA7C,IAAA,EAA6C,EAAA,MACtD,EAAO,UAAU,IALF,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KASf,GAAC,EAAM,SAAP,CAEE,IAAA,EAAS,EAAM,SAAS,IAAI,GAE9B,GAAU,MAAV,EAAE,IAAa,CACX,IAAA,EAAS,IAAI,EAAA,eAAe,CAChC,KAAM,EACN,MAAO,IAAI,EAAA,oBAAoB,CAC7B,MAAO,EACP,OAAA,EACA,OAAQ,EACR,MAAO,MAGX,EAAO,UAAU,GACjB,EAAK,OAAO,EAAO,IAEjB,GAAU,MAAV,EAAE,IAAa,CACX,IAAA,EAAS,IAAI,EAAA,eAAe,CAChC,KAAM,EACN,MAAO,IAAI,EAAA,iBAAiB,CAC1B,MAAO,EACP,OAAA,EACA,OAAQ,MAGZ,EAAO,UAAU,GACjB,EAAK,OAAO,EAAO,QAIvB,IAAM,EAAS,IAAI,EAAA,cAAc,CAC/B,MAAO,EAAM,MACb,OAAQ,EAAM,OACd,QAAS,EAAgB,IAAI,SAAC,GAAM,OAAA,EAAE,WAGlC,EAAc,EAAA,kBAAkB,CAAE,QAAS,GAAK,SAAU,KAEhE,EAAO,iBAAiB,GAExB,EAAO,kBAAkB,SAAC,GACN,IADgB,EAChB,EAAA,EAAA,EAAO,SADS,IACA,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAvB,IAAA,EAAuB,EAAA,OAC5B,EAAI,SAAS,EAAI,GAAK,EAAI,SAAS,EAAI,EAAM,QAC/C,EAAO,aAAa,EAAI,KAHM,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OAQpC,IAAM,EAAO,IAAI,EAAA,KAAK,CAAE,OAAA,EAAQ,MAAA,EAAO,OAAA,IACjC,EAAe,IAAI,EAAA,aAAa,CAAE,OAAA,EAAQ,KAAA,EAAM,MAAA,EAAO,OAAA,EAAQ,OAAA,IAErE,EAAO,OAAS,WACd,EAAO,WAAW,aAElB,EAAK,aAEC,IALa,EAKb,EAAS,CAAC,QAAS,QAAS,SAAU,SAAU,QAAS,OAAQ,SAAU,OAAQ,QAEvE,EAAA,EAAA,EAAO,SAPN,IAOe,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAvB,IAAA,EAAuB,EAAA,MAC1B,EAAa,EAAI,KAAO,EAAK,WAClB,IAAb,EAAI,KACN,EAAQ,KAAK,EAAK,QAAS,GAE3B,EAAQ,KAAK,EAAK,EAAO,EAAI,GAAK,EAAO,QAAS,IAZnC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAkBf,GAFJ,EAAa,OAET,EAAM,SAAU,CACZ,IAIF,EAJE,EAAM,EAAM,SAKV,OAAA,EAAM,QACP,IAAA,OACH,EAAI,MACJ,MACG,IAAA,QACH,EAAI,QACJ,MACF,QACE,EAAI,OAIR,EAAO,KAAK,CACV,GAAI,EAAI,EACR,GAAI,EAAI,EACR,GAAI,EAAI,EAAI,IACZ,GAAI,EAAI,EAAI,IACZ,UAnBQ,EAoBR,MAAO,IAGT,EAAO,KAAK,CACV,GAAI,EAAI,EAAI,IACZ,GAAI,EAAI,EAAI,IACZ,GAAI,EAAI,EACR,GAAI,EAAI,EACR,UA5BQ,EA6BR,MAAO,MAKb,EAAO,QAEP,EAAO","file":"main.8ed61634.js","sourceRoot":"..","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction randint(a, b) {\n    const min = Math.ceil(typeof b === \"number\" ? a : 0);\n    const max = Math.floor(typeof b === \"number\" ? b : a);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexports.randint = randint;\n/**\n * Returns a random number between min (inclusive) and max (inclusive)\n */\nfunction randfloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\nexports.randfloat = randfloat;\n/**\n * Returns a random element from the array.\n * @param array The array to retrieve an element from.\n */\nfunction choice(array) {\n    const i = randint(array.length - 1);\n    return array[i];\n}\nexports.choice = choice;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst random_1 = require(\"../random\");\nclass Matrix2D {\n    constructor(width, height, initialData) {\n        this.width = width;\n        this.height = height;\n        this._data = [];\n        if (initialData) {\n            this.setData(initialData);\n        }\n        else {\n            this._data = Array.from({ length: width }, () => Array.from({ length: height }, () => 0));\n        }\n    }\n    static random(width, height) {\n        let data = [];\n        for (let i = 0; i < width; i++) {\n            data.push([]);\n            for (let j = 0; j < height; j++) {\n                data[i].push(random_1.randfloat(-1, 1));\n            }\n        }\n        return new Matrix2D(width, height, data);\n    }\n    copy() {\n        return new Matrix2D(this.width, this.height, this._data);\n    }\n    testData(data) {\n        if (Array.isArray(data) && data.length === this.width) {\n            for (const subData of data) {\n                if (!Array.isArray(subData) || subData.length !== this.height || subData.some((a) => typeof a !== \"number\")) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    get(x, y) {\n        return this._data[x][y];\n    }\n    set(x, y, value) {\n        this._data[x][y] = value;\n    }\n    get data() {\n        return this._data;\n    }\n    setData(data) {\n        if (this.testData(data)) {\n            this._data = data;\n        }\n        else {\n            throw new Error(\"The data dont fit the shape.\");\n        }\n    }\n    static apply(a, fn) {\n        return a.data.map((col, x) => col.map((val, y) => fn(val, x, y)));\n    }\n    apply(fn) {\n        this._data = Matrix2D.apply(this, fn);\n    }\n    static merge(a, b, fn) {\n        if (a.width < b.width || a.height < b.height) {\n            throw new Error(\"The two matrix provided is aren't compatible (not the same size).\");\n        }\n        return Matrix2D.apply(a, (i, x, y) => fn(i, b.get(x, y), x, y));\n    }\n    merge(b, fn) {\n        this._data = Matrix2D.merge(this, b, fn);\n    }\n    static add(a, b) {\n        if (a.width !== b.width || a.height !== b.height) {\n            throw new Error(\"The matrixes don't have the same size.\");\n        }\n        return new Matrix2D(a.width, a.height, Matrix2D.merge(a, b, (i, j) => i + j));\n    }\n    add(a) {\n        const res = Matrix2D.add(this, a);\n        this._data = res._data;\n    }\n    static sub(a, b) {\n        return new Matrix2D(a.width, b.width, Matrix2D.merge(a, b, (i, j) => i - j));\n    }\n    sub(a) {\n        const res = Matrix2D.add(this, a);\n        this._data = res._data;\n    }\n    static mult(a, b) {\n        if (typeof b === \"number\") {\n            return new Matrix2D(a.width, a.height, Matrix2D.apply(a, (v) => v * b));\n        }\n        else {\n            if (a.height !== b.width) {\n                throw new Error(\"Invalid width and heights.\");\n            }\n            const res = new Matrix2D(a.width, b.height);\n            for (let x = 0; x < res.width; x++) {\n                for (let y = 0; y < res.height; y++) {\n                    let sum = 0;\n                    for (let k = 0; k < a.height; k++) {\n                        sum += a.get(x, k) * b.get(k, y);\n                    }\n                    res.set(x, y, sum);\n                }\n            }\n            return res;\n        }\n    }\n    mult(a) {\n        if (typeof a === \"number\") {\n            this.apply((v) => v * a);\n        }\n        else {\n            return Matrix2D.mult(this, a);\n        }\n    }\n    static div(m, s) {\n        return new Matrix2D(m.width, m.height, Matrix2D.apply(m, (v) => v / s));\n    }\n    div(s) {\n        this.apply((v) => v / s);\n    }\n}\nexports.Matrix2D = Matrix2D;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Matrix2D\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Return the quotient of the euclidean division between the divided and the divisor.\n * To get the remainder use the `%` operator.\n * @example\n * ```js\n * const quotient = eucDic(13,5)\n * // => 2\n * const remainder = 13 % 5\n * // => 3\n * ```\n * @param divided\n * @param divisor\n */\nfunction eucDiv(divided, divisor) {\n    return Math.floor(divided / divisor);\n}\nexports.eucDiv = eucDiv;\n/**\n * Assure that a value is between the min and max boundary.\n * @example\n * ```js\n * clamp(500,0,1000) // => 500\n * clamp(250,0,200) // => 200\n * clamp(-5,0,1) // => 0\n * ```\n * @param value\n * @param min\n * @param max\n */\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(min, value), max);\n}\nexports.clamp = clamp;\n/**\n * Use the first function to create a \"converter\" for that precision (numbers of significant digits).\n * @example\n * ```js\n * const to2Digits = toPrecision(2)\n * to2Digits(Math.PI) // => 3.1\n * to2Digits(421337) // => 42000\n * ```\n * @param precision The precision is number significant digits.\n */\nfunction toPrecision(precision) {\n    return (n) => Number(n.toPrecision(precision));\n}\nexports.toPrecision = toPrecision;\n/**\n * Creates an empty array with custom length and default value.\n * @example\n * ```js\n * emptyArray(5,0) // => [0, 0, 0, 0, 0]\n * ```\n * @param length\n * @param baseValue Can be anything.\n */\nfunction emptyArray(length, baseValue) {\n    return Array.from({ length }, () => baseValue);\n}\nexports.emptyArray = emptyArray;\n/**\n * Fonction to convert a value from a starting range to an end range.\n * @example\n * ```js\n * toRange(0.5, 0, 1, 0, 100) // => 50\n * toRange(25, 0, 100, 0, 4) // => 1\n * ```\n * @param value\n * @param startMin Min boundary of the starting range.\n * @param startMax Max boundary of the starting range.\n * @param endMin Min boundary of the ending range.\n * @param endMax Max boundary of the ending range.\n */\nfunction toRange(value, startMin, startMax, endMin, endMax) {\n    return ((value - startMin) / (startMax - startMin)) * (endMax - endMin) + endMin;\n}\nexports.toRange = toRange;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\n/**\n * Vec2D represents a 2D vector holding an x and y component.\n * Vec2D is immutable.\n * @example\n * ```js\n * // Basic ops\n * const a = new Vec2D(1, 1)\n * const b = a.mul(2) // => Vec2D(2, 2)\n * const c = b.add(c) // => Vec2D(3, 3)\n * const d = d.map((value) => value + 2) // => Vec2D(5, 5)\n *\n * // Distance between to points\n * const A = new Vec2D(0, 0)\n * const B = new Vec2D(1, 5)\n * const AB = B.sub(A) // Vec2D(1, 5)\n * const distanceAB = AB.norm() // 5.0990195135927845\n * ```\n */\nclass Vec2D {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Creates a Vec2D from any object with an x and y properties.\n     * @example\n     * ```js\n     * const circle = {\n     *  x: 10,\n     *  y: 25,\n     *  radius: 5,\n     *  color: \"red\",\n     * }\n     * const circlePosition = Vec2D.from(circle) // Vec2D(10, 25)\n     * ```\n     * @param obj An object with and x and y properties.\n     */\n    static from(obj) {\n        return new Vec2D(obj.x, obj.y);\n    }\n    /**\n     * Maps a function to the vector's components.\n     * @example\n     * ```js\n     * const a = new Vec(1, 3)\n     * const b = a.map((val) => val ** 2) // Vec2D(1, 9)\n     *\n     * const c = a.map((val, i) => {\n     *  if (i === 0) { // val is the x\n     *    return val + 1\n     *  } else { // val is the y\n     *    return val - 1\n     *  }\n     * }) // Vec2D(2, 2)\n     * @param fn The fonction that will be \"maped\". Takes the value and optionally the \"index\" of the component (0 for x, 1 for y).\n     */\n    map(fn) {\n        return new Vec2D(fn(this.x, 0), fn(this.y, 1));\n    }\n    /**\n     * Applies one function for each of the vector component.\n     * @example\n     * ```js\n     * const a = new Vec2D(1, 2)\n     * const b = a.apply((x) => x * 2, (y) => y - 3) // Vec2D(2, -1)\n     * ```\n     * @param xFn The function that will be applied to the x component.\n     * @param yFn The function that will be applied to the y component.\n     */\n    apply(xFn, yFn) {\n        return new Vec2D(xFn(this.x), yFn(this.y));\n    }\n    /**\n     * Merges two vectors into one using a function.\n     * @example\n     * ```js\n     * const a = new Vec2D(2, 2)\n     * const b = new Vec2D(1, 3)\n     * const c = a.merge(b, (v, w) => v + w)\n     *\n     * const d = a.merge(b, (v, w, i) => {\n     *  if (i === 0) { // for x\n     *    return v + w\n     *  } else { // for y\n     *    return v - w\n     *  }\n     * }) // Vec2D(3, -1)\n     * ```\n     * @param other The other vector that will b merged.\n     * @param fn The function that will be used to merge the two vectors. Gets the value of the first vectors, then the value of the second. Also gets the \"index\" of the component.\n     */\n    merge(other, fn) {\n        return new Vec2D(fn(this.x, other.x, 0), fn(this.y, other.y, 1));\n    }\n    add(a, b) {\n        let otherVec = typeof a === \"number\" ? new Vec2D(a, b || 0) : a;\n        return this.merge(otherVec, (a, b) => a + b);\n    }\n    sub(a, b) {\n        let otherVec = typeof a === \"number\" ? new Vec2D(a, b || 0) : a;\n        return this.merge(otherVec, (a, b) => a - b);\n    }\n    mul(a) {\n        if (typeof a === \"number\") {\n            return this.map((n) => n * a);\n        }\n        return this.merge(a, (n, b) => n * b);\n    }\n    div(a) {\n        if (typeof a === \"number\") {\n            return this.map((n) => n / a);\n        }\n        return this.merge(a, (n, b) => n / b);\n    }\n    normalize() {\n        const norm = this.norm();\n        let multiplier = norm;\n        if (norm > 0) {\n            multiplier = 1 / norm;\n        }\n        return this.mul(multiplier);\n    }\n    norm() {\n        return Math.sqrt(this.squaredNorm());\n    }\n    squaredNorm() {\n        return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n    cross(a) {\n        if (typeof a === \"number\") {\n            return new Vec2D(a * this.y, -a * this.x);\n        }\n        return this.x * a.y - this.y * a.x;\n    }\n    static cross(a, b) {\n        if (typeof a === \"number\" && typeof b === \"object\") {\n            return new Vec2D(-a * b.y, a * b.x);\n        }\n        else if (typeof a === \"object\" && typeof b === \"number\") {\n            return a.cross(b);\n        }\n        else if (typeof a === \"object\" && typeof b === \"object\") {\n            return a.cross(b);\n        }\n        throw new Error(\"Wrong arguments provided to the `cross` function.\");\n    }\n    dot(other) {\n        return this.x * other.x + this.y * other.y;\n    }\n    clamp(min, max, yMin, yMax) {\n        return new Vec2D(utils_1.clamp(this.x, min, max), utils_1.clamp(this.y, yMin || min, yMax || max));\n    }\n    /** Rotate the vector around the other vector by the angle (rad) */\n    rotateAround(other, angle) {\n        const diagVec = this.sub(other);\n        return other.add(new Vec2D(diagVec.x * Math.cos(angle) - diagVec.y * Math.sin(angle), diagVec.x * Math.sin(angle) + diagVec.y * Math.cos(angle)));\n    }\n    angleWith(other) {\n        return Math.acos(this.dot(other) / (this.norm() * other.norm()));\n    }\n}\nexports.Vec2D = Vec2D;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Vec2D\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass NeuralNetwork {\n    constructor(layers = []) {\n        this.layers = [];\n        for (const layer of layers) {\n            this.addLayer(layer);\n        }\n    }\n    addLayer(layer) {\n        if (this.layers.length === 0) {\n            this.layers.push(layer);\n        }\n        else if (layer.inputSize === this.layers[this.layers.length - 1].outputSize) {\n            this.layers.push(layer);\n        }\n        else {\n            throw new Error(\"The new layer input size doesn't match the previous layer output size.\");\n        }\n    }\n    predict(_input) {\n        let input = _input.slice();\n        for (const layer of this.layers) {\n            try {\n                input = layer.compute(input);\n            }\n            catch (error) {\n                throw new Error(`Error in layer ${this.layers.indexOf(layer)}: ${error}`);\n            }\n        }\n        return input;\n    }\n}\nexports.NeuralNetwork = NeuralNetwork;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ActivationFunction {\n    constructor(func, dfunc) {\n        this.func = func;\n        this.dfunc = dfunc;\n    }\n}\nexports.ActivationFunction = ActivationFunction;\nexports.sigmoidFn = new ActivationFunction((x) => 1 / (1 + Math.exp(-x)), (x) => x * (1 - x));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Matrix2D_1 = require(\"../Matrix2D\");\nconst ActivationFunction_1 = require(\"./ActivationFunction\");\nclass SimpleLayer {\n    constructor(ops) {\n        this.inputSize = ops.inputSize;\n        this.outputSize = ops.outputSize;\n        this.activationFunction = ops.activationFunction || ActivationFunction_1.sigmoidFn;\n        this.weights = Matrix2D_1.Matrix2D.random(this.outputSize, this.inputSize);\n        this.biais = Matrix2D_1.Matrix2D.random(this.outputSize, 1);\n    }\n    compute(_input) {\n        if (_input.length !== this.inputSize) {\n            throw new Error(\"Wrong input size.\");\n        }\n        const input = new Matrix2D_1.Matrix2D(this.inputSize, 1, _input.map((val) => [val]));\n        const output = this.weights.mult(input);\n        output.add(this.biais);\n        output.apply((val) => this.activationFunction.func(val));\n        return output.data.map((c) => c[0]);\n    }\n}\nexports.SimpleLayer = SimpleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./NeuralNetwork\"));\n__export(require(\"./Layer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vec2D_1 = require(\"../Vec2D\");\nclass Polygon {\n    static getEdges(polygon) {\n        const edges = [];\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const edge = polygon[j].sub(polygon[i]);\n            edges.push(edge);\n        }\n        return edges;\n    }\n    static getNormals(polygon) {\n        const edges = Polygon.getEdges(polygon);\n        return edges.map((e) => new Vec2D_1.Vec2D(-e.y, e.x).normalize());\n    }\n    static getCentroid(polygon) {\n        const sum = polygon.reduce((prev, cur) => prev.add(cur));\n        return sum.div(polygon.length);\n    }\n    static getInteriorAngles(polygon) {\n        const angles = [];\n        for (let i = 0; i < polygon.length; i++) {\n            const h = (i + polygon.length - 1) % polygon.length;\n            const j = (i + 1) % polygon.length;\n            const a = polygon[h].sub(polygon[i]);\n            const b = polygon[j].sub(polygon[i]);\n            const angle = Math.atan2(a.cross(b), a.dot(b));\n            angles.push(angle);\n        }\n        return angles;\n    }\n    static getBoundRadius(polygon) {\n        const centroid = Polygon.getCentroid(polygon);\n        let bestDistance = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const dist = polygon[i].sub(centroid).norm();\n            if (dist > bestDistance) {\n                bestDistance = dist;\n            }\n        }\n        return bestDistance;\n    }\n    static getMomentOfInertia(polygon, mass) {\n        let area = 0;\n        let center = new Vec2D_1.Vec2D(0, 0);\n        let moment = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const a = polygon[i];\n            const b = polygon[j];\n            const areaStep = a.cross(b) / 2;\n            const centerStep = a.add(b).div(3);\n            const momentStep = (areaStep * (a.dot(a) + b.dot(b) + a.dot(b))) / 6;\n            center = center\n                .mul(area)\n                .add(centerStep.mul(areaStep))\n                .div(area + areaStep);\n            area += areaStep;\n            moment += momentStep;\n        }\n        const density = mass / area;\n        moment *= density;\n        moment -= mass * center.dot(center);\n        return moment;\n    }\n    static getArea(polygon) {\n        let area = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const a = polygon[i];\n            const b = polygon[j];\n            area += a.cross(b) / 2;\n        }\n        return area;\n    }\n    /**\n     * @param polygon The polygon represented by its convex points.\n     * @param point The point to test.\n     * @return  1: The point lies inside the polygon.\n     *          0: The point lies on the polygon.\n     *          -1: The point lies outside the polygon.\n     */\n    static isPointIn(polygon, point) {\n        const substitutePointInLine = (pt1, pt2, queryPoint) => {\n            return (queryPoint.y - pt1.y) * (pt2.x - pt1.x) - (queryPoint.x - pt1.x) * (pt2.y - pt1.y);\n        };\n        const numSidesOfPolygon = polygon.length;\n        let countSameSideResults = 0;\n        for (let i = 0; i < numSidesOfPolygon; i++) {\n            const pointInLine = substitutePointInLine(polygon[i], polygon[(i + 1) % numSidesOfPolygon], point);\n            if (pointInLine == 0) {\n                return pointInLine;\n            }\n            countSameSideResults += pointInLine > 0 ? 0 : 1;\n        }\n        return Math.abs(countSameSideResults) == numSidesOfPolygon ? 1 : -1;\n    }\n}\nexports.Polygon = Polygon;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Matrix2D\"));\n__export(require(\"./Vec2D\"));\n__export(require(\"./utils\"));\n__export(require(\"./random\"));\n__export(require(\"./NeuralNetwork\"));\n__export(require(\"./Polygon\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This class is used as a wrapper around the HTMLCanvasElement.\n */\nclass CanvasWrapper {\n    constructor(ops) {\n        this._width = ops.width;\n        this._height = ops.height;\n        this.canvasEl = document.createElement('canvas');\n        this.canvasEl.width = this._width;\n        this.canvasEl.height = this._height;\n        this.ctx = this.canvasEl.getContext('2d');\n    }\n    /**\n     * The width of the canvas (internal not css size)\n     */\n    get width() {\n        return this._width;\n    }\n    set width(val) {\n        this.canvasEl.width = val;\n        this._width = val;\n    }\n    /**\n     * The height of the canvas (internal not css size)\n     */\n    get height() {\n        return this._height;\n    }\n    set height(val) {\n        this.canvasEl.height = val;\n        this._height = val;\n    }\n}\nexports.CanvasWrapper = CanvasWrapper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasWrapper_1 = require(\"./CanvasWrapper\");\n/**\n * This class is used to handle the update and render process.\n */\nclass CanvasLogic extends CanvasWrapper_1.CanvasWrapper {\n    constructor() {\n        super(...arguments);\n        /**\n         * lastTime keeps track of the last update (timestamp).\n         */\n        this.lastTime = 0;\n        /**\n         * rafRef keeps track of the requestAnimationFrame id.\n         */\n        this.rafRef = 0;\n        this.running = false;\n        /**\n         * Update is called before a render.\n         * Override it to implement your own logic.\n         * The delta is passed down, it's used to keep the updates sync with the framerate.\n         * Exemple:\n         * ```typescript\n         * update(delta) {\n         *  // `x` will be incremeted by 50 every second\n         *  x += 50 * delta\n         * }\n         * ```\n         */\n        this.update = (delta) => { };\n        /**\n         * Render is called after update.\n         * Override it to implement your own logic.\n         */\n        this.render = () => { };\n        this.main = () => {\n            if (this.running) {\n                if (this.lastTime === 0) {\n                    this.lastTime = Date.now();\n                }\n                const now = Date.now();\n                const delta = (now - this.lastTime) / 1000.0;\n                this.update(delta);\n                this.render();\n                this.lastTime = now;\n                this.rafRef = requestAnimationFrame(this.main);\n            }\n        };\n    }\n    /**\n     * Start the update and render loop.\n     */\n    start() {\n        this.running = true;\n        this.main();\n    }\n    /**\n     * Stop the update & render loop.\n     */\n    stop() {\n        this.running = false;\n        this.lastTime = 0;\n        cancelAnimationFrame(this.rafRef);\n    }\n}\nexports.CanvasLogic = CanvasLogic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasLogic_1 = require(\"./CanvasLogic\");\nconst DEFAULTS = {\n    color: \"black\",\n    lineWidth: 1.0,\n    font: \"10px Arial\",\n    align: \"start\",\n};\nclass CanvasDrawers extends CanvasLogic_1.CanvasLogic {\n    /**\n     * Draw a line.\n     */\n    line(ops) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(ops.x1, ops.y1);\n        this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n        this.ctx.lineTo(ops.x2, ops.y2);\n        this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a rectangle.\n     */\n    rect(ops) {\n        this.ctx.beginPath();\n        this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n        this.ctx.rect(ops.x, ops.y, ops.width, ops.height);\n        if (ops.stroke) {\n            this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n            this.ctx.stroke();\n        }\n        else {\n            this.ctx.fillStyle = ops.color || DEFAULTS.color;\n            this.ctx.fill();\n        }\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a circle.\n     */\n    circle(ops) {\n        this.ctx.beginPath();\n        this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n        this.ctx.arc(ops.x, ops.y, ops.radius, 0, 2 * Math.PI);\n        if (ops.stroke) {\n            this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n            this.ctx.stroke();\n        }\n        else {\n            this.ctx.fillStyle = ops.color || DEFAULTS.color;\n            this.ctx.fill();\n        }\n        this.ctx.closePath();\n    }\n    getShaper(ops) {\n        const shaper = {\n            start: () => {\n                this.ctx.beginPath();\n                this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n                return shaper;\n            },\n            go: (x, y) => {\n                this.ctx.moveTo(x, y);\n                return shaper;\n            },\n            line: (x, y) => {\n                this.ctx.lineTo(x, y);\n                return shaper;\n            },\n            done: () => {\n                this.ctx.closePath();\n                if (ops.stroke) {\n                    this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n                    this.ctx.stroke();\n                }\n                else {\n                    this.ctx.fillStyle = ops.color || DEFAULTS.color;\n                    this.ctx.fill();\n                }\n            },\n        };\n        return shaper;\n    }\n    triangle(ops) {\n        this.ctx.beginPath();\n        this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n        this.ctx.moveTo(ops.x1, ops.y1);\n        this.ctx.lineTo(ops.x2, ops.y2);\n        this.ctx.lineTo(ops.x3, ops.y3);\n        this.ctx.lineTo(ops.x1, ops.y1);\n        if (ops.stroke) {\n            this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n            this.ctx.stroke();\n        }\n        else {\n            this.ctx.fillStyle = ops.color || DEFAULTS.color;\n            this.ctx.fill();\n        }\n        this.ctx.closePath();\n    }\n    /**\n     * Set the background of the canvas to a color.\n     */\n    background(color) {\n        this.rect({\n            x: 0,\n            y: 0,\n            color,\n            height: this.height,\n            width: this.width,\n        });\n    }\n    /**\n     * Draw a text on the canvas.\n     */\n    text(ops) {\n        this.ctx.font = ops.font || DEFAULTS.font;\n        this.ctx.textAlign = ops.align || DEFAULTS.align;\n        this.ctx.lineWidth = ops.lineWidth || DEFAULTS.lineWidth;\n        if (ops.stroke) {\n            this.ctx.strokeStyle = ops.color || DEFAULTS.color;\n            this.ctx.strokeText(ops.text, ops.x, ops.y, ops.maxWidth);\n        }\n        else {\n            this.ctx.fillStyle = ops.color || DEFAULTS.color;\n            this.ctx.fillText(ops.text, ops.x, ops.y, ops.maxWidth);\n        }\n    }\n    /**\n     * Clear the whole canvas.\n     */\n    clear() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n}\nexports.CanvasDrawers = CanvasDrawers;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasDrawers_1 = require(\"./CanvasDrawers\");\nclass CanvasGroups extends CanvasDrawers_1.CanvasDrawers {\n    rotationGroup(fn, ops) {\n        this.ctx.save();\n        this.ctx.translate(ops.x, ops.y);\n        this.ctx.rotate(ops.rotation);\n        this.ctx.translate(-ops.x, -ops.y);\n        fn();\n        this.ctx.restore();\n    }\n    groupFn(instructions, groupFn) {\n        const addInstruction = (instruction) => this.groupFn([...instructions, instruction], groupFn);\n        return {\n            translate: (ops) => {\n                return addInstruction(() => this.ctx.translate(ops.x, ops.y));\n            },\n            rotate: (ops) => {\n                return addInstruction(() => this.ctx.rotate(ops.rotation));\n            },\n            scale: (ops) => {\n                return addInstruction(() => this.ctx.scale(ops.x, ops.y));\n            },\n            render: () => {\n                this.ctx.save();\n                for (const instruction of instructions) {\n                    instruction();\n                }\n                groupFn();\n                this.ctx.restore();\n            },\n        };\n    }\n    group(fn) {\n        return this.groupFn([], fn);\n    }\n}\nexports.CanvasGroups = CanvasGroups;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasGroups_1 = require(\"./CanvasGroups\");\nexports.loadImage = (url) => {\n    return new Promise((resolve) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => {\n            resolve(img);\n        };\n    });\n};\nclass CanvasImage extends CanvasGroups_1.CanvasGroups {\n    image(ops) {\n        if (ops.imageX !== undefined &&\n            ops.imageY !== undefined &&\n            ops.imageWidth !== undefined &&\n            ops.ImageHeight !== undefined &&\n            ops.maxWidth !== undefined &&\n            ops.maxHeight !== undefined) {\n            this.ctx.drawImage(ops.image, ops.imageX, ops.imageY, ops.imageWidth, ops.ImageHeight, ops.x, ops.y, ops.maxWidth, ops.maxHeight);\n        }\n        else if (ops.maxWidth !== undefined && ops.maxHeight !== undefined) {\n            this.ctx.drawImage(ops.image, ops.x, ops.y, ops.maxWidth, ops.maxHeight);\n        }\n        else {\n            this.ctx.drawImage(ops.image, ops.x, ops.y);\n        }\n    }\n}\nexports.CanvasImage = CanvasImage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasImage_1 = require(\"./CanvasImage\");\nclass CanvasMouse extends CanvasImage_1.CanvasImage {\n    constructor() {\n        super(...arguments);\n        this.mouse = {\n            x: 0,\n            y: 0,\n            /** 0: no button, 1: left, 2: right  */\n            button: 0,\n            preventDefault: false,\n            contextmenu: true,\n        };\n        this.mouseHandler = (ev) => {\n            if (this.mouse.preventDefault) {\n                ev.preventDefault();\n            }\n            this.mouse.x = ev.clientX;\n            this.mouse.y = ev.clientY;\n            this.mouse.button = ev.buttons;\n        };\n        this.contextmenu = (ev) => {\n            if (this.mouse.contextmenu === false) {\n                ev.preventDefault();\n            }\n        };\n    }\n    initialize() {\n        this.canvasEl.addEventListener(\"mousemove\", this.mouseHandler);\n        this.canvasEl.addEventListener(\"mouseup\", this.mouseHandler);\n        this.canvasEl.addEventListener(\"mousedown\", this.mouseHandler);\n        this.canvasEl.addEventListener(\"contextmenu\", this.contextmenu);\n    }\n    deinitialize() {\n        this.canvasEl.removeEventListener(\"mousemove\", this.mouseHandler);\n        this.canvasEl.removeEventListener(\"mouseup\", this.mouseHandler);\n        this.canvasEl.removeEventListener(\"mousedown\", this.mouseHandler);\n        this.canvasEl.removeEventListener(\"contextmenu\", this.contextmenu);\n    }\n    start() {\n        super.start();\n        this.initialize();\n    }\n    stop() {\n        super.stop();\n        this.deinitialize();\n    }\n}\nexports.CanvasMouse = CanvasMouse;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CanvasImage_1 = require(\"./CanvasImage\");\nexports.loadImage = CanvasImage_1.loadImage;\nconst CanvasMouse_1 = require(\"./CanvasMouse\");\nclass Vancas extends CanvasMouse_1.CanvasMouse {\n}\nexports.Vancas = Vancas;\n/**\n * Return a vancas instance.\n * Exemple:\n * ```typescript\n * const vancas = createVancas({ width: 500, height: 500 })\n *\n * document.body.appendChild(vancas.canvasEl)\n *\n * vancas.render = () => {\n *   vancas.clear()\n *   vancas.background('grey')\n * }\n *\n * vancas.start()\n * ```\n */\nexports.createVancas = (ops) => {\n    return new Vancas(ops);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction randint(a, b) {\n    const min = Math.ceil(typeof b === \"number\" ? a : 0);\n    const max = Math.floor(typeof b === \"number\" ? b : a);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexports.randint = randint;\n/**\n * Returns a random number between min (inclusive) and max (inclusive)\n */\nfunction randfloat(min, max) {\n    return Math.random() * (max - min) + min;\n}\nexports.randfloat = randfloat;\n/**\n * Returns a random element from the array.\n * @param array The array to retrieve an element from.\n */\nfunction choice(array) {\n    const i = randint(array.length - 1);\n    return array[i];\n}\nexports.choice = choice;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst random_1 = require(\"../random\");\nclass Matrix2D {\n    constructor(width, height, initialData) {\n        this.width = width;\n        this.height = height;\n        this._data = [];\n        if (initialData) {\n            this.setData(initialData);\n        }\n        else {\n            this._data = Array.from({ length: width }, () => Array.from({ length: height }, () => 0));\n        }\n    }\n    static random(width, height) {\n        let data = [];\n        for (let i = 0; i < width; i++) {\n            data.push([]);\n            for (let j = 0; j < height; j++) {\n                data[i].push(random_1.randfloat(-1, 1));\n            }\n        }\n        return new Matrix2D(width, height, data);\n    }\n    copy() {\n        return new Matrix2D(this.width, this.height, this._data);\n    }\n    testData(data) {\n        if (Array.isArray(data) && data.length === this.width) {\n            for (const subData of data) {\n                if (!Array.isArray(subData) || subData.length !== this.height || subData.some((a) => typeof a !== \"number\")) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    get(x, y) {\n        return this._data[x][y];\n    }\n    set(x, y, value) {\n        this._data[x][y] = value;\n    }\n    get data() {\n        return this._data;\n    }\n    setData(data) {\n        if (this.testData(data)) {\n            this._data = data;\n        }\n        else {\n            throw new Error(\"The data dont fit the shape.\");\n        }\n    }\n    static apply(a, fn) {\n        return a.data.map((col, x) => col.map((val, y) => fn(val, x, y)));\n    }\n    apply(fn) {\n        this._data = Matrix2D.apply(this, fn);\n    }\n    static merge(a, b, fn) {\n        if (a.width < b.width || a.height < b.height) {\n            throw new Error(\"The two matrix provided is aren't compatible (not the same size).\");\n        }\n        return Matrix2D.apply(a, (i, x, y) => fn(i, b.get(x, y), x, y));\n    }\n    merge(b, fn) {\n        this._data = Matrix2D.merge(this, b, fn);\n    }\n    static add(a, b) {\n        if (a.width !== b.width || a.height !== b.height) {\n            throw new Error(\"The matrixes don't have the same size.\");\n        }\n        return new Matrix2D(a.width, a.height, Matrix2D.merge(a, b, (i, j) => i + j));\n    }\n    add(a) {\n        const res = Matrix2D.add(this, a);\n        this._data = res._data;\n    }\n    static sub(a, b) {\n        return new Matrix2D(a.width, b.width, Matrix2D.merge(a, b, (i, j) => i - j));\n    }\n    sub(a) {\n        const res = Matrix2D.add(this, a);\n        this._data = res._data;\n    }\n    static mult(a, b) {\n        if (typeof b === \"number\") {\n            return new Matrix2D(a.width, a.height, Matrix2D.apply(a, (v) => v * b));\n        }\n        else {\n            if (a.height !== b.width) {\n                throw new Error(\"Invalid width and heights.\");\n            }\n            const res = new Matrix2D(a.width, b.height);\n            for (let x = 0; x < res.width; x++) {\n                for (let y = 0; y < res.height; y++) {\n                    let sum = 0;\n                    for (let k = 0; k < a.height; k++) {\n                        sum += a.get(x, k) * b.get(k, y);\n                    }\n                    res.set(x, y, sum);\n                }\n            }\n            return res;\n        }\n    }\n    mult(a) {\n        if (typeof a === \"number\") {\n            this.apply((v) => v * a);\n        }\n        else {\n            return Matrix2D.mult(this, a);\n        }\n    }\n    static div(m, s) {\n        return new Matrix2D(m.width, m.height, Matrix2D.apply(m, (v) => v / s));\n    }\n    div(s) {\n        this.apply((v) => v / s);\n    }\n}\nexports.Matrix2D = Matrix2D;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Matrix2D\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Return the quotient of the euclidean division between the divided and the divisor.\n * To get the remainder use the `%` operator.\n * @example\n * ```js\n * const quotient = eucDic(13,5)\n * // => 2\n * const remainder = 13 % 5\n * // => 3\n * ```\n * @param divided\n * @param divisor\n */\nfunction eucDiv(divided, divisor) {\n    return Math.floor(divided / divisor);\n}\nexports.eucDiv = eucDiv;\n/**\n * Assure that a value is between the min and max boundary.\n * @example\n * ```js\n * clamp(500,0,1000) // => 500\n * clamp(250,0,200) // => 200\n * clamp(-5,0,1) // => 0\n * ```\n * @param value\n * @param min\n * @param max\n */\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(min, value), max);\n}\nexports.clamp = clamp;\n/**\n * Use the first function to create a \"converter\" for that precision (numbers of significant digits).\n * @example\n * ```js\n * const to2Digits = toPrecision(2)\n * to2Digits(Math.PI) // => 3.1\n * to2Digits(421337) // => 42000\n * ```\n * @param precision The precision is number significant digits.\n */\nfunction toPrecision(precision) {\n    return (n) => Number(n.toPrecision(precision));\n}\nexports.toPrecision = toPrecision;\n/**\n * Creates an empty array with custom length and default value.\n * @example\n * ```js\n * emptyArray(5,0) // => [0, 0, 0, 0, 0]\n * ```\n * @param length\n * @param baseValue Can be anything.\n */\nfunction emptyArray(length, baseValue) {\n    return Array.from({ length }, () => baseValue);\n}\nexports.emptyArray = emptyArray;\n/**\n * Fonction to convert a value from a starting range to an end range.\n * @example\n * ```js\n * toRange(0.5, 0, 1, 0, 100) // => 50\n * toRange(25, 0, 100, 0, 4) // => 1\n * ```\n * @param value\n * @param startMin Min boundary of the starting range.\n * @param startMax Max boundary of the starting range.\n * @param endMin Min boundary of the ending range.\n * @param endMax Max boundary of the ending range.\n */\nfunction toRange(value, startMin, startMax, endMin, endMax) {\n    return ((value - startMin) / (startMax - startMin)) * (endMax - endMin) + endMin;\n}\nexports.toRange = toRange;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\n/**\n * Vec2D represents a 2D vector holding an x and y component.\n * Vec2D is immutable.\n * @example\n * ```js\n * // Basic ops\n * const a = new Vec2D(1, 1)\n * const b = a.mul(2) // => Vec2D(2, 2)\n * const c = b.add(c) // => Vec2D(3, 3)\n * const d = d.map((value) => value + 2) // => Vec2D(5, 5)\n *\n * // Distance between to points\n * const A = new Vec2D(0, 0)\n * const B = new Vec2D(1, 5)\n * const AB = B.sub(A) // Vec2D(1, 5)\n * const distanceAB = AB.norm() // 5.0990195135927845\n * ```\n */\nclass Vec2D {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Creates a Vec2D from any object with an x and y properties.\n     * @example\n     * ```js\n     * const circle = {\n     *  x: 10,\n     *  y: 25,\n     *  radius: 5,\n     *  color: \"red\",\n     * }\n     * const circlePosition = Vec2D.from(circle) // Vec2D(10, 25)\n     * ```\n     * @param obj An object with and x and y properties.\n     */\n    static from(obj) {\n        return new Vec2D(obj.x, obj.y);\n    }\n    /**\n     * Maps a function to the vector's components.\n     * @example\n     * ```js\n     * const a = new Vec(1, 3)\n     * const b = a.map((val) => val ** 2) // Vec2D(1, 9)\n     *\n     * const c = a.map((val, i) => {\n     *  if (i === 0) { // val is the x\n     *    return val + 1\n     *  } else { // val is the y\n     *    return val - 1\n     *  }\n     * }) // Vec2D(2, 2)\n     * @param fn The fonction that will be \"maped\". Takes the value and optionally the \"index\" of the component (0 for x, 1 for y).\n     */\n    map(fn) {\n        return new Vec2D(fn(this.x, 0), fn(this.y, 1));\n    }\n    /**\n     * Applies one function for each of the vector component.\n     * @example\n     * ```js\n     * const a = new Vec2D(1, 2)\n     * const b = a.apply((x) => x * 2, (y) => y - 3) // Vec2D(2, -1)\n     * ```\n     * @param xFn The function that will be applied to the x component.\n     * @param yFn The function that will be applied to the y component.\n     */\n    apply(xFn, yFn) {\n        return new Vec2D(xFn(this.x), yFn(this.y));\n    }\n    /**\n     * Merges two vectors into one using a function.\n     * @example\n     * ```js\n     * const a = new Vec2D(2, 2)\n     * const b = new Vec2D(1, 3)\n     * const c = a.merge(b, (v, w) => v + w)\n     *\n     * const d = a.merge(b, (v, w, i) => {\n     *  if (i === 0) { // for x\n     *    return v + w\n     *  } else { // for y\n     *    return v - w\n     *  }\n     * }) // Vec2D(3, -1)\n     * ```\n     * @param other The other vector that will b merged.\n     * @param fn The function that will be used to merge the two vectors. Gets the value of the first vectors, then the value of the second. Also gets the \"index\" of the component.\n     */\n    merge(other, fn) {\n        return new Vec2D(fn(this.x, other.x, 0), fn(this.y, other.y, 1));\n    }\n    add(a, b) {\n        let otherVec = typeof a === \"number\" ? new Vec2D(a, b || 0) : a;\n        return this.merge(otherVec, (a, b) => a + b);\n    }\n    sub(a, b) {\n        let otherVec = typeof a === \"number\" ? new Vec2D(a, b || 0) : a;\n        return this.merge(otherVec, (a, b) => a - b);\n    }\n    mul(a) {\n        if (typeof a === \"number\") {\n            return this.map((n) => n * a);\n        }\n        return this.merge(a, (n, b) => n * b);\n    }\n    div(a) {\n        if (typeof a === \"number\") {\n            return this.map((n) => n / a);\n        }\n        return this.merge(a, (n, b) => n / b);\n    }\n    normalize() {\n        const norm = this.norm();\n        let multiplier = norm;\n        if (norm > 0) {\n            multiplier = 1 / norm;\n        }\n        return this.mul(multiplier);\n    }\n    norm() {\n        return Math.sqrt(this.squaredNorm());\n    }\n    squaredNorm() {\n        return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n    cross(a) {\n        if (typeof a === \"number\") {\n            return new Vec2D(a * this.y, -a * this.x);\n        }\n        return this.x * a.y - this.y * a.x;\n    }\n    static cross(a, b) {\n        if (typeof a === \"number\" && typeof b === \"object\") {\n            return new Vec2D(-a * b.y, a * b.x);\n        }\n        else if (typeof a === \"object\" && typeof b === \"number\") {\n            return a.cross(b);\n        }\n        else if (typeof a === \"object\" && typeof b === \"object\") {\n            return a.cross(b);\n        }\n        throw new Error(\"Wrong arguments provided to the `cross` function.\");\n    }\n    dot(other) {\n        return this.x * other.x + this.y * other.y;\n    }\n    clamp(min, max, yMin, yMax) {\n        return new Vec2D(utils_1.clamp(this.x, min, max), utils_1.clamp(this.y, yMin || min, yMax || max));\n    }\n    /** Rotate the vector around the other vector by the angle (rad) */\n    rotateAround(other, angle) {\n        const diagVec = this.sub(other);\n        return other.add(new Vec2D(diagVec.x * Math.cos(angle) - diagVec.y * Math.sin(angle), diagVec.x * Math.sin(angle) + diagVec.y * Math.cos(angle)));\n    }\n    angleWith(other) {\n        return Math.acos(this.dot(other) / (this.norm() * other.norm()));\n    }\n}\nexports.Vec2D = Vec2D;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Vec2D\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass NeuralNetwork {\n    constructor(layers = []) {\n        this.layers = [];\n        for (const layer of layers) {\n            this.addLayer(layer);\n        }\n    }\n    addLayer(layer) {\n        if (this.layers.length === 0) {\n            this.layers.push(layer);\n        }\n        else if (layer.inputSize === this.layers[this.layers.length - 1].outputSize) {\n            this.layers.push(layer);\n        }\n        else {\n            throw new Error(\"The new layer input size doesn't match the previous layer output size.\");\n        }\n    }\n    predict(_input) {\n        let input = _input.slice();\n        for (const layer of this.layers) {\n            try {\n                input = layer.compute(input);\n            }\n            catch (error) {\n                throw new Error(`Error in layer ${this.layers.indexOf(layer)}: ${error}`);\n            }\n        }\n        return input;\n    }\n}\nexports.NeuralNetwork = NeuralNetwork;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ActivationFunction {\n    constructor(func, dfunc) {\n        this.func = func;\n        this.dfunc = dfunc;\n    }\n}\nexports.ActivationFunction = ActivationFunction;\nexports.sigmoidFn = new ActivationFunction((x) => 1 / (1 + Math.exp(-x)), (x) => x * (1 - x));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Matrix2D_1 = require(\"../Matrix2D\");\nconst ActivationFunction_1 = require(\"./ActivationFunction\");\nclass SimpleLayer {\n    constructor(ops) {\n        this.inputSize = ops.inputSize;\n        this.outputSize = ops.outputSize;\n        this.activationFunction = ops.activationFunction || ActivationFunction_1.sigmoidFn;\n        this.weights = Matrix2D_1.Matrix2D.random(this.outputSize, this.inputSize);\n        this.biais = Matrix2D_1.Matrix2D.random(this.outputSize, 1);\n    }\n    compute(_input) {\n        if (_input.length !== this.inputSize) {\n            throw new Error(\"Wrong input size.\");\n        }\n        const input = new Matrix2D_1.Matrix2D(this.inputSize, 1, _input.map((val) => [val]));\n        const output = this.weights.mult(input);\n        output.add(this.biais);\n        output.apply((val) => this.activationFunction.func(val));\n        return output.data.map((c) => c[0]);\n    }\n}\nexports.SimpleLayer = SimpleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./NeuralNetwork\"));\n__export(require(\"./Layer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vec2D_1 = require(\"../Vec2D\");\nclass Polygon {\n    static getEdges(polygon) {\n        const edges = [];\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const edge = polygon[j].sub(polygon[i]);\n            edges.push(edge);\n        }\n        return edges;\n    }\n    static getNormals(polygon) {\n        const edges = Polygon.getEdges(polygon);\n        return edges.map((e) => new Vec2D_1.Vec2D(-e.y, e.x).normalize());\n    }\n    static getCentroid(polygon) {\n        const sum = polygon.reduce((prev, cur) => prev.add(cur));\n        return sum.div(polygon.length);\n    }\n    static getInteriorAngles(polygon) {\n        const angles = [];\n        for (let i = 0; i < polygon.length; i++) {\n            const h = (i + polygon.length - 1) % polygon.length;\n            const j = (i + 1) % polygon.length;\n            const a = polygon[h].sub(polygon[i]);\n            const b = polygon[j].sub(polygon[i]);\n            const angle = Math.atan2(a.cross(b), a.dot(b));\n            angles.push(angle);\n        }\n        return angles;\n    }\n    static getBoundRadius(polygon) {\n        const centroid = Polygon.getCentroid(polygon);\n        let bestDistance = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const dist = polygon[i].sub(centroid).norm();\n            if (dist > bestDistance) {\n                bestDistance = dist;\n            }\n        }\n        return bestDistance;\n    }\n    static getMomentOfInertia(polygon, mass) {\n        let area = 0;\n        let center = new Vec2D_1.Vec2D(0, 0);\n        let moment = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const a = polygon[i];\n            const b = polygon[j];\n            const areaStep = a.cross(b) / 2;\n            const centerStep = a.add(b).div(3);\n            const momentStep = (areaStep * (a.dot(a) + b.dot(b) + a.dot(b))) / 6;\n            center = center\n                .mul(area)\n                .add(centerStep.mul(areaStep))\n                .div(area + areaStep);\n            area += areaStep;\n            moment += momentStep;\n        }\n        const density = mass / area;\n        moment *= density;\n        moment -= mass * center.dot(center);\n        return moment;\n    }\n    static getArea(polygon) {\n        let area = 0;\n        for (let i = 0; i < polygon.length; i++) {\n            const j = (i + 1) % polygon.length;\n            const a = polygon[i];\n            const b = polygon[j];\n            area += a.cross(b) / 2;\n        }\n        return area;\n    }\n    /**\n     * @param polygon The polygon represented by its convex points.\n     * @param point The point to test.\n     * @return  1: The point lies inside the polygon.\n     *          0: The point lies on the polygon.\n     *          -1: The point lies outside the polygon.\n     */\n    static isPointIn(polygon, point) {\n        const substitutePointInLine = (pt1, pt2, queryPoint) => {\n            return (queryPoint.y - pt1.y) * (pt2.x - pt1.x) - (queryPoint.x - pt1.x) * (pt2.y - pt1.y);\n        };\n        const numSidesOfPolygon = polygon.length;\n        let countSameSideResults = 0;\n        for (let i = 0; i < numSidesOfPolygon; i++) {\n            const pointInLine = substitutePointInLine(polygon[i], polygon[(i + 1) % numSidesOfPolygon], point);\n            if (pointInLine == 0) {\n                return pointInLine;\n            }\n            countSameSideResults += pointInLine > 0 ? 0 : 1;\n        }\n        return Math.abs(countSameSideResults) == numSidesOfPolygon ? 1 : -1;\n    }\n}\nexports.Polygon = Polygon;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Matrix2D\"));\n__export(require(\"./Vec2D\"));\n__export(require(\"./utils\"));\n__export(require(\"./random\"));\n__export(require(\"./NeuralNetwork\"));\n__export(require(\"./Polygon\"));\n","import { Vec2D } from \"maabm\"\nimport { CircleRigidShape } from \"../Shapes\"\nimport { CollisionInfo } from \".\"\n\nexport const circleCircleCollision = (a: CircleRigidShape, b: CircleRigidShape) => {\n  const fromAtoB = b.center.sub(a.center)\n  const squaredDist = fromAtoB.squaredNorm()\n  const squaredRadiusSum = (a.radius + b.radius) ** 2\n\n  if (squaredRadiusSum >= squaredDist) {\n    if (squaredDist !== 0) {\n      const depth = a.radius + b.radius - fromAtoB.norm()\n\n      const normalFromBtoA = fromAtoB.mul(-1).normalize()\n      const pointInRadiusB = b.center.add(normalFromBtoA.mul(b.radius))\n\n      return new CollisionInfo({\n        a,\n        b,\n        depth,\n        normal: fromAtoB.normalize(),\n        start: pointInRadiusB,\n      })\n    } else if (a.radius > b.radius) {\n      return new CollisionInfo({\n        a,\n        b,\n        depth: a.radius + b.radius,\n        normal: new Vec2D(0, -1),\n        start: a.center.add(0, a.radius),\n      })\n    } else {\n      return new CollisionInfo({\n        a,\n        b,\n        depth: a.radius + b.radius,\n        normal: new Vec2D(0, -1),\n        start: b.center.add(0, b.radius),\n      })\n    }\n  }\n  return false\n}\n","import { Vec2D } from \"maabm\"\nimport { RigidShape } from \"../Shapes\"\n\ninterface CollisionInfoProps<AType = RigidShape, BType = RigidShape> {\n  depth: number\n  normal: Vec2D\n  start: Vec2D\n  a: AType\n  b: BType\n}\n\nexport class CollisionInfo<AType = RigidShape, BType = RigidShape> {\n  public a: AType\n  public b: BType\n\n  public depth: number\n  public normal: Vec2D\n  public start: Vec2D\n  public end: Vec2D\n\n  constructor(ops: CollisionInfoProps<AType, BType>) {\n    this.a = ops.a\n    this.b = ops.b\n    this.depth = ops.depth\n    this.normal = ops.normal\n    this.start = ops.start\n    this.end = this.start.add(this.normal.mul(this.depth))\n  }\n\n  public changeDirection() {\n    return new CollisionInfo({\n      a: this.a,\n      b: this.b,\n      depth: this.depth,\n      normal: this.normal.mul(-1),\n      start: this.end,\n    })\n  }\n}\n","import { CircleRigidShape, PolygonRigidShape, RectangleRigidShape } from \"../Shapes\"\nimport { CollisionInfo } from \".\"\n\nconst nearestEdge = (a: PolygonRigidShape | RectangleRigidShape, b: CircleRigidShape) => {\n  let bestDistance = -Infinity\n  let nearestEdgeIndex = 0\n  for (let i = 0; i < a.vertices.length; ++i) {\n    const v = b.center.sub(a.vertices[i])\n    const projection = v.dot(a.normals[i])\n    if (projection > 0) {\n      return {\n        inside: false,\n        nearestEdgeIndex: i,\n        distance: projection,\n      }\n    }\n    if (projection > bestDistance) {\n      bestDistance = projection\n      nearestEdgeIndex = i\n    }\n  }\n  return {\n    inside: true,\n    nearestEdgeIndex,\n    distance: bestDistance,\n  }\n}\n\nexport const polygonCircleCollision = (a: PolygonRigidShape | RectangleRigidShape, b: CircleRigidShape) => {\n  const { distance, inside, nearestEdgeIndex } = nearestEdge(a, b)\n\n  if (!inside) {\n    const v1 = b.center.sub(a.vertices[nearestEdgeIndex])\n    const v2 = a.vertices[(nearestEdgeIndex + 1) % a.vertices.length].sub(a.vertices[nearestEdgeIndex])\n    const dot = v1.dot(v2)\n\n    if (dot < 0) {\n      const dist = v1.norm()\n      if (dist > b.radius) {\n        return false\n      }\n      const normal = v1.normalize()\n      const radiusVec = normal.mul(-b.radius)\n      return new CollisionInfo({\n        a,\n        b,\n        depth: b.radius - dist,\n        normal,\n        start: b.center.add(radiusVec),\n      })\n    } else {\n      const v1 = b.center.sub(a.vertices[(nearestEdgeIndex + 1) % a.vertices.length])\n      const v2 = a.vertices[nearestEdgeIndex].sub(a.vertices[(nearestEdgeIndex + 1) % a.vertices.length])\n      const dot = v1.dot(v2)\n      if (dot < 0) {\n        const dist = v1.norm()\n        if (dist > b.radius) {\n          return false\n        }\n        const normal = v1.normalize()\n        const radiusVec = normal.mul(-b.radius)\n        return new CollisionInfo({\n          a,\n          b,\n          depth: b.radius - dist,\n          normal,\n          start: b.center.add(radiusVec),\n        })\n      } else if (distance < b.radius) {\n        const radiusVec = a.normals[nearestEdgeIndex].mul(b.radius)\n        return new CollisionInfo({\n          a,\n          b,\n          depth: b.radius - distance,\n          normal: a.normals[nearestEdgeIndex],\n          start: b.center.sub(radiusVec),\n        })\n      } else {\n        return false\n      }\n    }\n  } else {\n    const radiusVec = a.normals[nearestEdgeIndex].mul(b.radius)\n    return new CollisionInfo({\n      a,\n      b,\n      depth: b.radius - distance,\n      normal: a.normals[nearestEdgeIndex],\n      start: b.center.sub(radiusVec),\n    })\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { CollisionInfo } from \".\"\nimport { RectangleRigidShape, PolygonRigidShape } from \"../Shapes\"\n\ninterface SupportPoint {\n  dist: number\n  point: Vec2D\n}\n\nconst findSupportPoint = (vertices: Vec2D[], dir: Vec2D, ptOnEdge: Vec2D) => {\n  const supportPoint = {\n    dist: -Infinity,\n    point: undefined as Vec2D | undefined,\n  }\n  for (const vertex of vertices) {\n    const vToEdge = vertex.sub(ptOnEdge)\n    const projection = vToEdge.dot(dir)\n    if (projection > 0 && projection > supportPoint.dist) {\n      supportPoint.point = vertex\n      supportPoint.dist = projection\n    }\n  }\n\n  if (supportPoint.point === undefined) {\n    return undefined\n  } else {\n    return supportPoint as SupportPoint\n  }\n}\n\nconst findAxisLeastPenetration = (\n  a: PolygonRigidShape | RectangleRigidShape,\n  b: PolygonRigidShape | RectangleRigidShape\n) => {\n  let supportPoint\n  let bestDistance = Infinity\n  let bestIndex = 0\n  let hasSupport = true\n  let i = 0\n  while (hasSupport && i < a.normals.length) {\n    const n = a.normals[i]\n\n    const dir = n.mul(-1)\n    const ptOnEdge = a.vertices[i]\n\n    const tempSupportPoint = findSupportPoint(b.vertices, dir, ptOnEdge)\n    hasSupport = tempSupportPoint !== undefined\n\n    if (tempSupportPoint !== undefined && tempSupportPoint.dist < bestDistance) {\n      bestDistance = tempSupportPoint.dist\n      bestIndex = i\n      supportPoint = tempSupportPoint.point\n    }\n    i++\n  }\n  if (hasSupport && supportPoint) {\n    const normal = a.normals[bestIndex]\n    const start = supportPoint.add(normal.mul(bestDistance))\n    return new CollisionInfo({\n      a,\n      b,\n      depth: bestDistance,\n      normal,\n      start,\n    })\n  }\n  return false\n}\n\nexport const polygonPolygonCollision = (\n  a: PolygonRigidShape | RectangleRigidShape,\n  b: PolygonRigidShape | RectangleRigidShape\n) => {\n  const axisAB = findAxisLeastPenetration(a, b)\n  if (axisAB !== false) {\n    const axisBA = findAxisLeastPenetration(b, a)\n    if (axisBA !== false) {\n      // When depth is equal it s broken need fix\n      if (axisAB.depth < axisBA.depth) {\n        const depthVec = axisAB.normal.mul(axisAB.depth)\n        return new CollisionInfo({\n          a,\n          b,\n          depth: axisAB.depth,\n          normal: axisAB.normal,\n          start: axisAB.start.sub(depthVec),\n        })\n      } else {\n        return new CollisionInfo({\n          a,\n          b,\n          depth: axisBA.depth,\n          normal: axisBA.normal.mul(-1),\n          start: axisBA.start,\n        })\n      }\n    }\n  }\n  return false\n}\n","import { PhysicalObject } from \"../Objects\"\nimport { CollisionInfo } from \".\"\n\nexport const resolveCollision = (\n  collision: CollisionInfo<PhysicalObject, PhysicalObject>,\n  positionalCorrection?: { iterations: number; rate: number }\n) => {\n  const DEBUG = false\n\n  if (collision.a.invMass === 0 && collision.b.invMass === 0) return\n\n  if (positionalCorrection) {\n    const correctionAmount = (collision.depth / (collision.a.invMass + collision.b.invMass)) * positionalCorrection.rate\n    const correctionVector = collision.normal.mul(correctionAmount)\n    collision.a.move(correctionVector.mul(-collision.a.invMass))\n    collision.b.move(correctionVector.mul(collision.b.invMass))\n  }\n\n  const n = collision.normal\n\n  const start = collision.start.mul(collision.b.invMass / (collision.a.invMass + collision.b.invMass))\n  const end = collision.end.mul(collision.a.invMass / (collision.a.invMass + collision.b.invMass))\n  const p = start.add(end)\n\n  const rA = p.sub(collision.a.position)\n  const rB = p.sub(collision.b.position)\n\n  const aVelocity = collision.a.velocity.add(\n    -1 * collision.a.angularVelocity * rA.y,\n    collision.a.angularVelocity * rA.x\n  )\n  const bVelocity = collision.b.velocity.add(\n    -1 * collision.b.angularVelocity * rB.y,\n    collision.b.angularVelocity * rB.x\n  )\n  const relativeVelocity = bVelocity.sub(aVelocity)\n\n  const rVelocityInNormal = relativeVelocity.dot(n)\n\n  if (rVelocityInNormal > 0) {\n    return\n  }\n\n  const restitution = Math.min(collision.a.restitution, collision.b.restitution)\n  const friction = Math.min(collision.a.friction, collision.b.friction)\n\n  const rACrossN = rA.cross(n)\n  const rBCrossN = rB.cross(n)\n\n  const jN =\n    (-(1 + restitution) * rVelocityInNormal) /\n    (collision.a.invMass +\n      collision.b.invMass +\n      rACrossN * rACrossN * collision.a.invInertia +\n      rBCrossN * rBCrossN * collision.b.invInertia)\n\n  const impulseNormal = n.mul(jN)\n\n  DEBUG && console.log(\"impulseNormal:\", impulseNormal)\n\n  collision.a.velocity = collision.a.velocity.sub(impulseNormal.mul(collision.a.invMass))\n  collision.b.velocity = collision.b.velocity.add(impulseNormal.mul(collision.b.invMass))\n  collision.a.angularVelocity -= rACrossN * jN * collision.a.invInertia\n  collision.b.angularVelocity += rBCrossN * jN * collision.b.invInertia\n\n  DEBUG && console.log(\"a.velocity:\", collision.a.velocity)\n  DEBUG && console.log(\"a.angularVelocity:\", collision.a.angularVelocity)\n\n  const tangent = relativeVelocity.sub(n.mul(rVelocityInNormal)).normalize().mul(-1)\n\n  const rACrossT = rA.cross(tangent)\n  const rBCrossT = rB.cross(tangent)\n\n  let jT =\n    (-(1 + restitution) * relativeVelocity.dot(tangent) * friction) /\n    (collision.a.invMass +\n      collision.b.invMass +\n      rACrossT * rACrossT * collision.a.invInertia +\n      rBCrossT * rBCrossT * collision.b.invInertia)\n\n  if (jT > jN) {\n    jT = jN\n  }\n\n  const impulseTangent = tangent.mul(jT)\n\n  collision.a.velocity = collision.a.velocity.sub(impulseTangent.mul(collision.a.invMass))\n  collision.b.velocity = collision.b.velocity.add(impulseTangent.mul(collision.b.invMass))\n  collision.a.angularVelocity -= rACrossT * jT * collision.a.invInertia\n  collision.b.angularVelocity += rBCrossT * jT * collision.b.invInertia\n}\n","export * from \"./CircleCircle\"\nexport * from \"./CollisionInfo\"\nexport * from \"./PolygonCircle\"\nexport * from \"./PolygonPolygon\"\nexport * from \"./resolveCollision\"\n","import { PhysicsEngine } from \".\"\nimport { PhysicalObject } from \"../Objects\"\nimport { CollisionInfo } from \"../Collision\"\nimport { Polygon, Vec2D } from \"maabm\"\n\nexport type UpdateHook = (engine: PhysicsEngine) => void\n\nexport const gravityHook: UpdateHook = (engine) => {\n  for (const object of engine.objects) {\n    if (object.hasGravity) {\n      object.force = object.force.add(PhysicsEngine.gravity)\n    }\n  }\n}\n\nexport const createDragHook = (density: number) => {\n  const dragHook: UpdateHook = (engine) => {\n    for (const object of engine.objects) {\n      if (object.dragCoefficient) {\n        const v = object.velocity\n        const vSquared = v.mul(v)\n        const area = object.shape.getArea()\n        const f = vSquared.mul(area * density * object.dragCoefficient * -0.5)\n        object.force = object.force.add(f)\n      }\n    }\n  }\n\n  return dragHook\n}\n\nexport const createDumpingHook = (ops: { linear: number; angular: number }) => {\n  const dumpingHook: UpdateHook = (engine) => {\n    for (const object of engine.objects) {\n      object.force = object.force.add(object.velocity.mul(ops.linear))\n      object.torque = object.angularVelocity * ops.angular\n      // v.mul(1.0 / (1.0 + h * body.m_linearDamping))\n      // w *= 1.0 / (1.0 + h * body.m_angularDamping)\n      // object.velocity = object.velocity.mul(1.0/(1.0+))\n    }\n  }\n\n  return dumpingHook\n}\n\nexport interface ApplyFlickProps {\n  object: PhysicalObject\n  /**\n   * The point of application must be in the object shape.\n   * In m\n   */\n  pointOfApplication: Vec2D\n  /**\n   * In N\n   */\n  force: Vec2D\n  /**\n   * Should the function check if the point of application is in the shape.\n   * Disable only if you know what you do\n   * @default false\n   */\n  check?: boolean\n}\n/**\n * `applyFlick` is a shorthand function to apply a specified force on an object at a given point.\n */\nexport const applyFlick = ({ force, object, pointOfApplication, check }: ApplyFlickProps) => {\n  if (!check) {\n    if (object.shape.type === \"circle\") {\n      const dist = object.position.sub(pointOfApplication).norm()\n\n      if (dist > object.shape.radius) return\n    } else {\n      if (Polygon.isPointIn(object.shape.vertices, pointOfApplication) === -1) return\n    }\n  }\n  object.force = object.force.add(force)\n  const r = pointOfApplication.sub(object.position)\n  object.torque = r.cross(force)\n}\n\nexport type CollisionHook<T = void> = (collision: CollisionInfo<PhysicalObject, PhysicalObject>) => T\n","import { Vec2D } from \"maabm\"\nimport { RigidShape } from \"../Shapes\"\n\nexport interface AABBox {\n  min: Vec2D\n  max: Vec2D\n}\n\nexport const shapeToBox = (shape: RigidShape): AABBox => {\n  return {\n    min: shape.center.sub(shape.boundAABB.div(2)),\n    max: shape.center.add(shape.boundAABB.div(2)),\n  }\n}\n\nexport const intersectAABB = (a: AABBox, b: AABBox) => {\n  return a.min.x <= b.max.x && a.max.x >= b.min.x && a.min.y <= b.max.y && a.max.y >= b.min.y\n}\n","import { circleCircleCollision, CollisionInfo, polygonCircleCollision, polygonPolygonCollision } from \"../Collision\"\nimport { PhysicalObject } from \"../Objects\"\nimport { intersectAABB, shapeToBox, converter, BroadPhaseBaseFunction } from \".\"\n\nexport const bruteBroadPhase: BroadPhaseBaseFunction = ({ objects }) => {\n  const collisions: CollisionInfo<PhysicalObject, PhysicalObject>[] = []\n  for (let i = 0; i < objects.length; i++) {\n    for (let j = i + 1; j < objects.length; j++) {\n      const a = objects[i].shape\n      const b = objects[j].shape\n      const aBox = shapeToBox(a)\n      const bBox = shapeToBox(b)\n      if (intersectAABB(aBox, bBox)) {\n        const convert = converter(objects[i], objects[j])\n        if (a.type === \"circle\" && b.type === \"circle\") {\n          const result = circleCircleCollision(a, b)\n          if (result !== false) collisions.push(convert(result))\n        } else if (\n          (a.type === \"rectangle\" || a.type === \"polygon\") &&\n          (b.type === \"rectangle\" || b.type === \"polygon\")\n        ) {\n          const result = polygonPolygonCollision(a, b)\n          if (result !== false) collisions.push(convert(result))\n        } else if ((a.type === \"rectangle\" || a.type === \"polygon\") && b.type === \"circle\") {\n          const result = polygonCircleCollision(a, b)\n          if (result !== false) collisions.push(convert(result))\n        } else if (a.type === \"circle\" && (b.type === \"polygon\" || b.type === \"rectangle\")) {\n          let result = polygonCircleCollision(b, a)\n          if (result !== false) {\n            result = result.changeDirection()\n            collisions.push(convert(result))\n          }\n        }\n      }\n    }\n  }\n  return collisions\n}\n","import { Vec2D } from \"maabm\"\nimport { PhysicalObject } from \"../Objects\"\nimport { AABBox, intersectAABB, shapeToBox } from \".\"\nimport { Vancas } from \"vancas\"\n\nexport interface SpatialGridProps {\n  min: Vec2D\n  max: Vec2D\n  pxPerCell: number\n}\n\nexport class SpatialGrid {\n  public min: Vec2D\n  public max: Vec2D\n  public pxPerCell: number\n\n  public width: number\n  public height: number\n  public totalCells: number\n  public allocatedCells = 0\n\n  public checked: { [hash: string]: true } = {}\n  public hashChecked = 0\n\n  public grid: PhysicalObject[][][]\n\n  constructor(ops: SpatialGridProps) {\n    this.min = ops.min\n    this.max = ops.max\n    this.pxPerCell = ops.pxPerCell\n\n    const size = this.max.sub(this.min)\n    this.width = Math.floor(size.x / this.pxPerCell)\n    this.height = Math.floor(size.y / this.pxPerCell)\n    this.totalCells = this.width * this.height\n\n    this.grid = Array(this.width)\n  }\n\n  public insert(obj: PhysicalObject) {\n    const box = shapeToBox(obj.shape)\n\n    const cellBox: AABBox = {\n      min: box.min.div(this.pxPerCell).map(Math.floor),\n      max: box.max.div(this.pxPerCell).map(Math.floor),\n    }\n\n    const xMax = Math.min(cellBox.max.x, this.width - 1)\n    const yMax = Math.min(cellBox.max.y, this.height - 1)\n\n    for (let x = cellBox.min.x; x <= xMax; x++) {\n      if (!this.grid[x]) {\n        this.grid[x] = Array(this.height)\n      }\n      for (let y = cellBox.min.y; y <= yMax; y++) {\n        if (!this.grid[x][y]) {\n          this.grid[x][y] = []\n          this.allocatedCells++\n        }\n        this.grid[x][y].push(obj)\n      }\n    }\n  }\n\n  public checkCollision() {\n    const couples: PhysicalObject[][] = []\n\n    for (let x = 0; x < this.width; x++) {\n      if (!this.grid[x]) continue\n\n      for (let y = 0; y < this.height; y++) {\n        if (!this.grid[x][y]) continue\n\n        const cell = this.grid[x][y]\n\n        for (let i = 0; i < cell.length; i++) {\n          for (let j = i + 1; j < cell.length; j++) {\n            const a = cell[i]\n            const b = cell[j]\n\n            const hashAtoB = `${a.id}:${b.id}`\n            const hashBtoA = `${b.id}:${a.id}`\n\n            this.hashChecked += 2\n\n            if (!this.checked[hashAtoB] && !this.checked[hashBtoA]) {\n              this.checked[hashAtoB] = true\n              this.checked[hashBtoA] = true\n\n              const aBox = shapeToBox(a.shape)\n              const bBox = shapeToBox(b.shape)\n\n              if (intersectAABB(aBox, bBox)) {\n                if (!(a.mass === 0 && b.mass === 0)) {\n                  couples.push([a, b])\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return couples\n  }\n}\n","import { circleCircleCollision, CollisionInfo, polygonPolygonCollision, polygonCircleCollision } from \"../Collision\"\nimport { PhysicalObject } from \"../Objects\"\nimport { SpatialGrid, SpatialGridProps, converter, BroadPhaseBaseFunction, BroadPhaseBaseProps } from \".\"\n\nexport const gridBroadPhase: BroadPhaseBaseFunction<SpatialGridProps & BroadPhaseBaseProps> = ({\n  objects,\n  ...options\n}) => {\n  const grid = new SpatialGrid(options)\n  const collisions: CollisionInfo<PhysicalObject, PhysicalObject>[] = []\n\n  for (const obj of objects) {\n    grid.insert(obj)\n  }\n\n  const couples = grid.checkCollision()\n\n  for (const [a, b] of couples) {\n    const convert = converter(a, b)\n    if (a.shape.type === \"circle\" && b.shape.type === \"circle\") {\n      const result = circleCircleCollision(a.shape, b.shape)\n      if (result !== false) collisions.push(convert(result))\n    } else if (\n      (a.shape.type === \"rectangle\" || a.shape.type === \"polygon\") &&\n      (b.shape.type === \"rectangle\" || b.shape.type === \"polygon\")\n    ) {\n      const result = polygonPolygonCollision(a.shape, b.shape)\n      if (result !== false) collisions.push(convert(result))\n    } else if ((a.shape.type === \"rectangle\" || a.shape.type === \"polygon\") && b.shape.type === \"circle\") {\n      const result = polygonCircleCollision(a.shape, b.shape)\n      if (result !== false) collisions.push(convert(result))\n    } else if (a.shape.type === \"circle\" && (b.shape.type === \"polygon\" || b.shape.type === \"rectangle\")) {\n      let result = polygonCircleCollision(b.shape, a.shape)\n      if (result !== false) {\n        result = result.changeDirection()\n        collisions.push(convert(result))\n      }\n    }\n  }\n\n  return collisions\n}\n","import { CollisionInfo } from \"../Collision\"\nimport { PhysicalObject } from \"../Objects\"\n\nexport const converter = (objA: PhysicalObject, objB: PhysicalObject) => (collisionInfo: CollisionInfo) => {\n  return new CollisionInfo({\n    ...collisionInfo,\n    a: objA,\n    b: objB,\n  })\n}\n","import { CollisionInfo } from \"../Collision\"\nimport { PhysicalObject } from \"../Objects\"\n\nexport interface BroadPhaseBaseProps {\n  objects: PhysicalObject[]\n}\n\nexport type BroadPhaseBaseFunction<Props extends BroadPhaseBaseProps = BroadPhaseBaseProps> = (\n  props: Props\n) => CollisionInfo<PhysicalObject, PhysicalObject>[]\n\nexport * from \"./AABB\"\nexport * from \"./BruteBroadPhase\"\nexport * from \"./Grid\"\nexport * from \"./GridBroadPhase\"\nexport * from \"./utils\"\n","import { Vec2D } from \"maabm\"\nimport { resolveCollision } from \"../Collision\"\nimport { PhysicalObject } from \"../Objects\"\nimport { gravityHook, CollisionHook, UpdateHook, createDragHook } from \"./Hooks\"\nimport { BroadPhaseBaseFunction, bruteBroadPhase, gridBroadPhase } from \"../BroadPhase\"\n\nexport * from \"./Hooks\"\n\ninterface PositionalCorrection {\n  iterations: number\n  rate: number\n}\n\ninterface PhysicsEngineProps {\n  objects: PhysicalObject[]\n\n  /**\n   * In m\n   */\n  width: number\n  /**\n   * In m\n   */\n  height: number\n\n  /**\n   * @default { iterations: 15, rate: 0.8 }\n   */\n  positionalCorrection?: PositionalCorrection | false\n\n  /**\n   * The maximum number of frames per seconds\n   * @default 60\n   */\n  fps?: number\n\n  /**\n   * Principally used to add forces.\n   * In the engine the gravity and drag hook are already integrated.\n   * @default [gravityHook, dragHook]\n   */\n  preUpdateHooks?: UpdateHook[]\n\n  /**\n   * Principally used to add game logic (object outside of world for exemple).\n   * @default []\n   */\n  postUpdateHooks?: UpdateHook[]\n\n  /**\n   * Called after all of the objects are correctly updated.\n   */\n  drawHook?: (engine: PhysicsEngine) => void\n\n  /**\n   * Used to implement game collision logic.\n   * Must return a boolean value determining if the engine should solve the collision.\n   */\n  shouldCollideHook?: CollisionHook<boolean>\n\n  /**\n   * Called after a collision has been successfully solved.\n   * May be used to implement more complex resolution.\n   */\n  postCollideHook?: CollisionHook\n\n  /**\n   * Broad phase method.\n   * `grid` is usually the best.\n   * @default \"grid\"\n   */\n  broadPhase?: \"grid\" | \"brute\"\n\n  /**\n   * Width / Height a grid cell (for the broad phase)\n   * @default 1\n   */\n  mPerCell?: number\n\n  /**\n   * Density of fluid used in the engine.\n   * Used for the drag forces.\n   * By default it's the density of air: `1.2`.\n   * Try `1000` for the water.\n   * @default 1.2\n   */\n  density?: number\n}\n\nexport class PhysicsEngine {\n  public objects: PhysicalObject[]\n\n  /**\n   * In m\n   */\n  public width: number\n\n  /**\n   * In m\n   */\n  public height: number\n\n  public positionalCorrection?: PositionalCorrection\n\n  public broadPhaseFunction: BroadPhaseBaseFunction\n\n  /**\n   * Maximum frames per seconds.\n   */\n  public fps: number\n\n  public updateIntervalMilliseconds: number\n  public updateIntervalSeconds: number\n  /**\n   * Shortcut for `updateIntervalSeconds`.\n   */\n  public dt: number\n\n  /**\n   * Principally used to add forces.\n   * In the engine the gravity and drag hook are already integrated.\n   */\n  public preUpdateHooks: UpdateHook[]\n\n  /**\n   * Principally used to add game logic (object outside of world for exemple).\n   */\n  public postUpdateHooks: UpdateHook[]\n\n  /**\n   * Used to implement game collision logic.\n   * Must return a boolean value determining if the engine should solve the collision.\n   */\n  public shouldCollideHook?: CollisionHook<boolean>\n\n  /**\n   * Called after a collision has been successfully solved.\n   * May be used to implement more complex resolution.\n   */\n  public postCollideHook?: CollisionHook\n\n  /**\n   * Called after all of the objects are correctly updated.\n   */\n  public drawHook?: (engine: PhysicsEngine) => void\n\n  private idIncrementor = 0\n\n  private running = false\n\n  private time = {\n    current: 0,\n    elapsed: 0,\n    previous: 0,\n    lag: 0,\n  }\n\n  /**\n   * Gravity vector used in the engine.\n   * In m*s^-2\n   */\n  public static gravity = new Vec2D(0, 9.81)\n\n  constructor(ops: PhysicsEngineProps) {\n    this.objects = ops.objects\n    for (const obj of this.objects) {\n      obj.id = this.idIncrementor\n      this.idIncrementor++\n    }\n\n    this.width = ops.width\n    this.height = ops.height\n\n    if (ops.broadPhase && ops.broadPhase === \"brute\") {\n      this.broadPhaseFunction = bruteBroadPhase\n    } else {\n      this.broadPhaseFunction = (props) =>\n        gridBroadPhase({\n          min: new Vec2D(0, 0),\n          max: new Vec2D(this.width, this.height),\n          pxPerCell: ops.mPerCell || 10,\n          ...props,\n        })\n    }\n\n    if (ops.positionalCorrection) {\n      this.positionalCorrection = ops.positionalCorrection\n    } else if (ops.positionalCorrection === undefined) {\n      this.positionalCorrection = { iterations: 18, rate: 0.8 }\n    }\n\n    this.fps = ops.fps || 60\n    this.updateIntervalMilliseconds = 1000 / this.fps\n    this.updateIntervalSeconds = 1 / this.fps\n    this.dt = this.updateIntervalSeconds\n\n    const density = ops.density || 1.2\n    const dragHook = createDragHook(density)\n\n    this.preUpdateHooks = ops.preUpdateHooks || [gravityHook, dragHook]\n    this.postUpdateHooks = ops.preUpdateHooks || []\n\n    this.drawHook = ops.drawHook\n\n    this.shouldCollideHook = ops.shouldCollideHook\n    this.postCollideHook = ops.postCollideHook\n  }\n\n  public addPreUpdateHook(hook: UpdateHook) {\n    this.preUpdateHooks.push(hook)\n  }\n\n  public addPostUpdateHook(hook: UpdateHook) {\n    this.postUpdateHooks.push(hook)\n  }\n\n  /**\n   * Adds a `PhysicalObject` to the engine.\n   * Use this to update the object id.\n   */\n  public addObject(object: PhysicalObject) {\n    object.id = this.idIncrementor\n    this.idIncrementor++\n    this.objects.push(object)\n  }\n\n  public removeObject(id: number) {\n    this.objects = this.objects.filter((o) => o.id !== id)\n  }\n\n  public start() {\n    this.running = true\n    this.step()\n  }\n  public stop() {\n    this.running = false\n    this.time = {\n      current: 0,\n      elapsed: 0,\n      previous: 0,\n      lag: 0,\n    }\n  }\n\n  private step() {\n    if (!this.running) return\n\n    const now = Date.now()\n\n    if (this.time.previous === 0) {\n      this.time.previous = now\n    }\n\n    requestAnimationFrame(() => {\n      this.step()\n    })\n\n    this.time.current = now\n    this.time.elapsed = this.time.current - this.time.previous\n    this.time.previous = this.time.current\n    this.time.lag += this.time.elapsed\n\n    if (this.drawHook) this.drawHook(this)\n\n    while (this.time.lag >= this.updateIntervalMilliseconds) {\n      this.time.lag -= this.updateIntervalMilliseconds\n\n      for (const preHook of this.preUpdateHooks) {\n        preHook(this)\n      }\n\n      this.computeCollisions()\n\n      this.update(this.updateIntervalSeconds)\n\n      for (const postHook of this.postUpdateHooks) {\n        postHook(this)\n      }\n    }\n  }\n\n  /**\n   * You can use this method to update objects positions if you implement your own time stepping logic.\n   * @param dt Interval of time between two updates.\n   */\n  public update(dt: number) {\n    for (const object of this.objects) {\n      object.update(dt)\n    }\n  }\n\n  /**\n   * You can use this method to solve collisions of objects if you implement your own time stepping logic.\n   */\n  public computeCollisions() {\n    const resolution = () => {\n      const collisions = this.broadPhaseFunction({ objects: this.objects })\n      for (const collision of collisions) {\n        if (this.shouldCollideHook) {\n          const res = this.shouldCollideHook(collision)\n          if (!res) {\n            continue\n          }\n        }\n        resolveCollision(collision, this.positionalCorrection)\n        if (this.postCollideHook) this.postCollideHook(collision)\n      }\n    }\n\n    if (this.positionalCorrection) {\n      resolution()\n    } else {\n      resolution()\n    }\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { BaseRigidShape, RigidShape } from \"../Shapes\"\n\ninterface PhysicalObjectProps<Shape extends BaseRigidShape = RigidShape> {\n  shape: Shape\n\n  /**\n   * Mass of the object in kg.\n   * A mass of 0 will that the object is static (doesn't fall and can't me moved).\n   */\n  mass: number\n\n  /**\n   * @default 0.8\n   */\n  friction?: number\n\n  /**\n   * \"Bounciness\" of the object\n   * @default 0.8\n   */\n  restitution?: number\n\n  /**\n   * In m*s^-1\n   * @default new Vec2D(0, 0)\n   */\n  initialVelocity?: Vec2D\n\n  /**\n   * In rad*s^-1\n   * @default 0\n   */\n  initialAngularVelocity?: number\n\n  /**\n   * Set if the object is affected by gravity.\n   * An object with a mass of 0 will always ignore gravity.\n   * @default true\n   */\n  hasGravity?: boolean\n\n  /**\n   * Resistance of an object in a fluid environment, such as air or water.\n   * If not defined the object will be affected by drag.\n   * @default undefined\n   */\n  dragCoefficient?: number\n}\n\nexport class PhysicalObject<Shape extends BaseRigidShape = RigidShape> {\n  /**\n   * Handle by the engine.\n   */\n  public id = -1\n\n  public shape: Shape\n\n  /**\n   * In N\n   */\n  public force = new Vec2D(0, 0)\n\n  /**\n   * In m*s^-2\n   */\n  public acceleration = new Vec2D(0, 0)\n\n  /**\n   * In kg\n   */\n  public mass: number\n\n  public invMass: number\n\n  /**\n   * In m*s^-1\n   */\n  public velocity: Vec2D\n\n  /**\n   * The position is the distance between the origin the center of mass of the object.\n   * In m\n   */\n  public position: Vec2D\n\n  /**\n   * Rotational/angular force.\n   */\n  public torque = 0\n\n  /**\n   * In rad*s^-2\n   */\n  public angularAcceleration = 0\n\n  /**\n   * In kg*m^2\n   */\n  public inertia: number\n\n  public invInertia: number\n  /**\n   * In rad*s^-1\n   */\n  public angularVelocity: number\n\n  /**\n   * In rad\n   */\n  public angle: number\n\n  public friction: number\n\n  /**\n   * \"Bounciness\" of the object\n   */\n  public restitution: number\n\n  /**\n   * Set if the object is affected by gravity.\n   * An object with a mass of 0 will always ignore gravity.\n   */\n  public hasGravity: boolean\n\n  /**\n   * Resistance of an object in a fluid environment, such as air or water.\n   * If not defined the object will be affected by drag.\n   */\n  public dragCoefficient?: number\n\n  constructor(ops: PhysicalObjectProps<Shape>) {\n    this.shape = ops.shape\n    this.position = this.shape.center\n    this.angle = this.shape.angle\n\n    this.velocity = ops.initialVelocity || new Vec2D(0, 0)\n    this.angularVelocity = ops.initialAngularVelocity || 0\n\n    this.mass = ops.mass\n    if (this.mass !== 0) {\n      this.invMass = 1 / this.mass\n    } else {\n      this.invMass = 0\n    }\n\n    if (ops.hasGravity !== undefined) {\n      this.hasGravity = ops.hasGravity\n    } else {\n      this.hasGravity = this.mass !== 0\n    }\n\n    this.friction = ops.friction || 0.8\n    this.restitution = ops.restitution || 0.8\n\n    if (this.mass !== 0) {\n      this.inertia = this.shape.getInertia(this.mass)\n      this.invInertia = 1 / this.inertia\n    } else {\n      this.inertia = 0\n      this.invInertia = 0\n    }\n\n    this.dragCoefficient = ops.dragCoefficient\n  }\n\n  /**\n   * Performs the verlet integration on the object.\n   * @param dt Interval of time between the last update.\n   */\n  public update(dt: number) {\n    const newPosition = this.position.add(this.velocity.mul(dt).add(this.acceleration.mul(dt ** 2 * 0.5)))\n\n    const newAcceleration = this.force.mul(this.invMass)\n    const newVelocity = this.velocity.add(this.acceleration.add(newAcceleration).mul(dt * 0.5))\n\n    const deltaPos = newPosition.sub(this.position)\n    this.move(deltaPos)\n    this.acceleration = newAcceleration\n    this.velocity = newVelocity\n\n    // this.velocity.mul(1.0 / (1.0 + dt * -1))\n\n    this.force = new Vec2D(0, 0)\n\n    const newAngle = this.angle + this.angularVelocity * dt + this.angularAcceleration * (dt ** 2 * 0.5)\n\n    const newAngularAcceleration = this.torque * this.invInertia\n    const newAngularVelocity = this.angularVelocity + (this.angularAcceleration + newAngularAcceleration) * (dt * 0.5)\n\n    const deltaAng = newAngle - this.angle\n    this.rotate(deltaAng)\n    this.angularAcceleration = newAngularAcceleration\n    this.angularVelocity = newAngularVelocity\n\n    // this.angularVelocity *= 1.0 / (1.0 + dt * -7)\n\n    this.torque = 0\n  }\n\n  /**\n   * @param direction In m\n   */\n  public move(direction: Vec2D) {\n    this.shape.move(direction)\n    this.position = this.position.add(direction)\n  }\n\n  /**\n   * @param angle In rad\n   */\n  public rotate(angle: number) {\n    this.angle += angle\n    this.shape.rotate(angle)\n  }\n\n  public copy() {\n    const copy = new PhysicalObject({\n      mass: this.mass,\n      shape: this.shape.copy() as Shape,\n      dragCoefficient: this.dragCoefficient,\n      friction: this.friction,\n      hasGravity: this.hasGravity,\n      initialAngularVelocity: this.angularVelocity,\n      initialVelocity: this.velocity,\n      restitution: this.restitution,\n    })\n    copy.force = this.force\n    copy.torque = this.torque\n\n    return copy\n  }\n}\n","import { Vec2D, Polygon } from \"maabm\"\nimport { BaseRigidShape, BaseRigidShapeProps } from \".\"\n\nexport interface PolygonRigidShapeProps extends Omit<BaseRigidShapeProps, \"center\"> {\n  /**\n   * In m\n   */\n  vertices: Vec2D[]\n}\n\nexport class PolygonRigidShape extends BaseRigidShape {\n  public center: Vec2D\n\n  /**\n   * In m\n   */\n  public vertices: Vec2D[]\n\n  public normals: Vec2D[]\n\n  public boundAABB: Vec2D\n\n  public type = \"polygon\" as const\n\n  constructor(ops: PolygonRigidShapeProps) {\n    super({ ...ops, center: new Vec2D(0, 0) })\n\n    this.vertices = ops.vertices\n\n    const angles = Polygon.getInteriorAngles(this.vertices)\n\n    if (angles.some((a) => a > Math.PI)) {\n      throw new Error(\"Not a valid convex polygon\")\n    }\n\n    this.center = Polygon.getCentroid(this.vertices)\n    this.normals = Polygon.getNormals(this.vertices)\n    this.boundAABB = PolygonRigidShape.computeAABB(this.vertices)\n\n    if (this.angle !== 0) {\n      const angle = this.angle\n      this.angle = 0\n      this.rotate(angle)\n    }\n  }\n\n  /**\n   * Construct a polygon from a given point, the coordinates of the vertices are relative to the given point.\n   */\n  public static fromCenter(ops: PolygonRigidShapeProps & { center: Vec2D }) {\n    return new PolygonRigidShape({\n      ...ops,\n      vertices: ops.vertices.map((v) => v.add(ops.center)),\n    })\n  }\n\n  public static computeAABB(vertices: Vec2D[]) {\n    const width = {\n      min: Infinity,\n      max: -Infinity,\n    }\n    const height = {\n      min: Infinity,\n      max: -Infinity,\n    }\n\n    const xAxis = new Vec2D(1, 0)\n    const yAxis = new Vec2D(0, 1)\n    for (const vertex of vertices) {\n      const xDot = vertex.dot(xAxis)\n      if (xDot < width.min) {\n        width.min = xDot\n      }\n      if (xDot > width.max) {\n        width.max = xDot\n      }\n      const yDot = vertex.dot(yAxis)\n      if (yDot < height.min) {\n        height.min = yDot\n      }\n      if (yDot > height.max) {\n        height.max = yDot\n      }\n    }\n\n    return new Vec2D(width.max - width.min, height.max - height.min)\n  }\n\n  public move(direction: Vec2D) {\n    this.center = this.center.add(direction)\n    for (let i = 0; i < this.vertices.length; i++) {\n      this.vertices[i] = this.vertices[i].add(direction)\n    }\n  }\n\n  public rotate(angle: number) {\n    this.angle += angle\n    for (let i = 0; i < this.vertices.length; i++) {\n      this.vertices[i] = this.vertices[i].rotateAround(this.center, angle)\n    }\n    this.normals = Polygon.getNormals(this.vertices)\n  }\n\n  public getInertia(mass: number) {\n    return Polygon.getMomentOfInertia(this.vertices, mass)\n  }\n\n  public getArea() {\n    return Polygon.getArea(this.vertices)\n  }\n\n  public copy(): PolygonRigidShape {\n    return new PolygonRigidShape({\n      angle: this.angle,\n      vertices: this.vertices,\n    })\n  }\n\n  public furthestPoint(d: Vec2D) {\n    let bestVertex = this.vertices[0]\n    for (let i = 1; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i]\n      if (bestVertex.dot(d) < vertex.dot(d)) {\n        bestVertex = vertex\n      }\n    }\n    return bestVertex\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { BaseRigidShape, BaseRigidShapeProps } from \".\"\nimport { PolygonRigidShape } from \"./Polygon\"\n\nexport interface RectangleRigidShapeProps extends BaseRigidShapeProps {\n  /**\n   * In m\n   */\n  width: number\n  /**\n   * In m\n   */\n  height: number\n}\n\nexport class RectangleRigidShape extends BaseRigidShape {\n  /**\n   * In m\n   */\n  public width: number\n\n  /**\n   * In m\n   */\n  public height: number\n\n  /**\n   * In m\n   */\n  public vertices: Vec2D[]\n\n  public normals: Vec2D[]\n\n  public boundAABB: Vec2D\n\n  public type = \"rectangle\" as const\n\n  constructor(ops: RectangleRigidShapeProps) {\n    super(ops)\n    this.width = ops.width\n    this.height = ops.height\n\n    this.boundAABB = new Vec2D(this.width, this.height)\n\n    // this.vertices = [\n    //   this.center.add(-this.width / 2, -this.height / 2),\n    //   this.center.add(-this.width / 2, this.height / 2),\n    //   this.center.add(this.width / 2, this.height / 2),\n    //   this.center.add(this.width / 2, -this.height / 2),\n    // ]\n\n    this.vertices = [\n      this.center.add(-this.width / 2, -this.height / 2),\n      this.center.add(this.width / 2, -this.height / 2),\n      this.center.add(this.width / 2, this.height / 2),\n      this.center.add(-this.width / 2, this.height / 2),\n    ]\n\n    this.normals = RectangleRigidShape.computeNormal(this.vertices)\n\n    if (this.angle !== 0) {\n      const angle = this.angle\n      this.angle = 0\n      this.rotate(angle)\n    }\n  }\n\n  private static computeNormal(vertices: Vec2D[]) {\n    const normals = []\n    for (let i = 0; i < 4; i++) {\n      const j = i === 3 ? 0 : i + 1\n      const k = j === 3 ? 0 : j + 1\n      normals.push(vertices[j].sub(vertices[k]).normalize())\n    }\n    return normals\n  }\n\n  public move(direction: Vec2D) {\n    this.center = this.center.add(direction)\n    for (let i = 0; i < 4; i++) {\n      this.vertices[i] = this.vertices[i].add(direction)\n    }\n  }\n\n  public rotate(angle: number) {\n    this.angle += angle\n    for (let i = 0; i < 4; i++) {\n      this.vertices[i] = this.vertices[i].rotateAround(this.center, angle)\n    }\n    this.normals = RectangleRigidShape.computeNormal(this.vertices)\n    this.boundAABB = PolygonRigidShape.computeAABB(this.vertices)\n  }\n\n  public getInertia(mass: number) {\n    if (mass === 0) return 0\n    return (mass * (this.width ** 2 + this.height ** 2)) / 12\n  }\n\n  public getArea() {\n    return this.width * this.height\n  }\n\n  public copy(): RectangleRigidShape {\n    return new RectangleRigidShape({\n      angle: this.angle,\n      center: this.center,\n      height: this.height,\n      width: this.width,\n    })\n  }\n\n  public furthestPoint(d: Vec2D) {\n    let bestVertex = this.vertices[0]\n    for (let i = 1; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i]\n      if (bestVertex.dot(d) < vertex.dot(d)) {\n        bestVertex = vertex\n      }\n    }\n    return bestVertex\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { BaseRigidShape, BaseRigidShapeProps } from \".\"\n\nexport interface CircleRigidShapeProps extends BaseRigidShapeProps {\n  /**\n   * In m\n   */\n  radius: number\n}\n\nexport class CircleRigidShape extends BaseRigidShape {\n  /**\n   * In m\n   */\n  public radius: number\n\n  /**\n   * For visualisation/debug purposes.\n   */\n  public linePoint: Vec2D\n\n  public boundAABB: Vec2D\n\n  public type = \"circle\" as const\n\n  constructor(ops: CircleRigidShapeProps) {\n    super(ops)\n\n    this.radius = ops.radius\n    this.boundAABB = new Vec2D(this.radius * 2, this.radius * 2)\n    this.linePoint = this.center.add(this.radius, 0)\n  }\n\n  public move(direction: Vec2D) {\n    this.center = this.center.add(direction)\n    this.linePoint = this.linePoint.add(direction)\n  }\n\n  public rotate(angle: number) {\n    this.angle += angle\n    this.linePoint = this.linePoint.rotateAround(this.center, angle)\n  }\n\n  public getInertia(mass: number) {\n    if (mass === 0) return 0\n    return (mass * this.radius ** 2) / 12\n  }\n\n  public getArea() {\n    return Math.PI * this.radius ** 2\n  }\n\n  public copy(): CircleRigidShape {\n    return new CircleRigidShape({\n      angle: this.angle,\n      center: this.center,\n      radius: this.radius,\n    })\n  }\n\n  public furthestPoint(d: Vec2D) {\n    return this.center.add(d.mul(this.radius))\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { CircleRigidShape } from \"./Circle\"\nimport { PolygonRigidShape } from \"./Polygon\"\nimport { RectangleRigidShape } from \"./Rectangle\"\n\nexport interface BaseRigidShapeProps {\n  /**\n   * The distance between the centroid of the shape and the origin.\n   * In m\n   */\n  center: Vec2D\n  /**\n   * In rad\n   */\n  angle: number\n}\n\n/**\n * All shapes must be convex !\n */\nexport abstract class BaseRigidShape {\n  /**\n   * The distance between the centroid of the shape and the origin.\n   * In m\n   */\n  public center: Vec2D\n\n  /**\n   * In rad\n   */\n  public angle: number\n\n  /**\n   * The boundAABB vector hold the width of the AABB in the x component and its height in the y component.\n   */\n  public abstract boundAABB: Vec2D\n\n  public abstract type: string\n\n  constructor(ops: BaseRigidShapeProps) {\n    this.center = ops.center\n    this.angle = ops.angle\n  }\n\n  /**\n   * @param direction In m\n   */\n  public abstract move(direction: Vec2D): void\n\n  /**\n   * @param angle In rad\n   */\n  public abstract rotate(angle: number): void\n\n  /**\n   * @param mass In kg\n   * @returns The moment of inertia in kg*m^2\n   */\n  public abstract getInertia(mass: number): number\n\n  /**\n   * @returns The area in m^2\n   */\n  public abstract getArea(): number\n\n  // TODO: maybe a better handling of this\n  public abstract copy(): BaseRigidShape\n\n  /**\n   * Used in GJK\n   */\n  public abstract furthestPoint(direction: Vec2D): Vec2D\n}\n\nexport * from \"./Rectangle\"\nexport * from \"./Circle\"\nexport * from \"./Polygon\"\n\nexport type RigidShape = CircleRigidShape | RectangleRigidShape | PolygonRigidShape\n","import { Vancas } from \"vancas\"\nimport { PhysicalObject } from \"../src/Objects\"\nimport { CircleRigidShape, PolygonRigidShape, RectangleRigidShape } from \"../src/Shapes\"\n\ninterface DrawersOptions {\n  pxPerM: number\n  vancas: Vancas\n}\n\nexport class Drawers {\n  private pxPerM: number\n  private vancas: Vancas\n\n  constructor(ops: DrawersOptions) {\n    this.pxPerM = ops.pxPerM\n    this.vancas = ops.vancas\n  }\n\n  private polygon(polygon: PolygonRigidShape | RectangleRigidShape, color: string, isSelected: boolean) {\n    const vertices = polygon.vertices.map((v) => v.mul(this.pxPerM))\n    const center = polygon.center.mul(this.pxPerM)\n\n    const innerShaper = this.vancas.getShaper({ color })\n    const outlineShaper = this.vancas.getShaper({\n      color: isSelected ? \"red\" : \"black\",\n      stroke: true,\n      lineWidth: isSelected ? 3.0 : 1.0,\n    })\n    innerShaper.start()\n    innerShaper.go(vertices[0].x, vertices[0].y)\n    outlineShaper.start()\n    outlineShaper.go(vertices[0].x, vertices[0].y)\n\n    for (let i = 1; i < vertices.length; i++) {\n      const v = vertices[i]\n      innerShaper.line(v.x, v.y)\n      outlineShaper.line(v.x, v.y)\n    }\n\n    innerShaper.done()\n    outlineShaper.done()\n\n    this.vancas.circle({\n      x: center.x,\n      y: center.y,\n      radius: 2,\n      color: isSelected ? \"red\" : \"black\",\n      lineWidth: isSelected ? 3.0 : 1.0,\n    })\n  }\n\n  private circle(circle: CircleRigidShape, color: string, isSelected: boolean) {\n    const center = circle.center.mul(this.pxPerM)\n    const radius = circle.radius * this.pxPerM\n\n    this.vancas.circle({\n      color,\n      radius,\n      x: center.x,\n      y: center.y,\n    })\n    this.vancas.circle({\n      color: isSelected ? \"red\" : \"black\",\n      radius,\n      stroke: true,\n      x: center.x,\n      y: center.y,\n      lineWidth: isSelected ? 3.0 : 1.0,\n    })\n    this.vancas.circle({\n      color: isSelected ? \"red\" : \"black\",\n      radius: 2,\n      x: center.x,\n      y: center.y,\n      lineWidth: isSelected ? 3.0 : 1.0,\n    })\n  }\n\n  public draw(object: PhysicalObject, color: string, isSelected: boolean) {\n    if (object.shape.type === \"circle\") {\n      this.circle(object.shape, color, isSelected)\n    } else {\n      this.polygon(object.shape, color, isSelected)\n    }\n  }\n}\n","import { Polygon, Vec2D } from \"maabm\"\nimport { Vancas } from \"vancas\"\nimport { applyFlick, PhysicsEngine } from \"../src/Engine\"\nimport { Menu } from \"./menu\"\nimport { Mouse } from \"./mouse\"\n\ninterface ForceApplierOptions {\n  engine: PhysicsEngine\n  vancas: Vancas\n  mouse: Mouse\n  menu: Menu\n  pxPerM: number\n}\n\nexport class ForceApplier {\n  private engine: PhysicsEngine\n  private vancas: Vancas\n  private mouse: Mouse\n  private menu: Menu\n  private pxPerM: number\n\n  private startPoint: Vec2D | undefined\n\n  constructor(ops: ForceApplierOptions) {\n    this.engine = ops.engine\n    this.vancas = ops.vancas\n    this.mouse = ops.mouse\n    this.menu = ops.menu\n    this.pxPerM = ops.pxPerM\n\n    this.mouse.addEventListener((e) => {\n      if (e.type === \"mouseleave\" && this.startPoint) {\n        this.startPoint = undefined\n        return\n      }\n\n      if (!this.menu.selectedId) return\n      const object = this.engine.objects.find((o) => o.id === this.menu.selectedId)\n      if (!object || object.mass === 0) return\n\n      if (!this.startPoint && e.type === \"mousedown\" && e.button === 2 && this.mouse.position) {\n        const enginePosition = this.mouse.position.div(this.pxPerM)\n\n        if (object.shape.type === \"circle\") {\n          const dist = object.position.sub(enginePosition).norm()\n\n          if (dist > object.shape.radius) return\n        } else {\n          if (Polygon.isPointIn(object.shape.vertices, enginePosition) === -1) return\n        }\n\n        this.menu.pause()\n        this.startPoint = this.mouse.position\n      } else if (e.type === \"mouseup\" && e.button === 2 && this.startPoint && this.mouse.position) {\n        const force = this.startPoint.sub(this.mouse.position).mul(10)\n\n        applyFlick({\n          force,\n          object,\n          pointOfApplication: this.startPoint.div(this.pxPerM),\n        })\n\n        this.menu.play()\n        this.startPoint = undefined\n      }\n    })\n  }\n\n  draw() {\n    if (this.startPoint && this.mouse.position) {\n      this.vancas.line({\n        x1: this.startPoint.x,\n        y1: this.startPoint.y,\n        x2: this.mouse.position.x,\n        y2: this.mouse.position.y,\n        color: \"white\",\n        lineWidth: 4.0,\n      })\n      this.vancas.line({\n        x1: this.startPoint.x,\n        y1: this.startPoint.y,\n        x2: this.mouse.position.x,\n        y2: this.mouse.position.y,\n        color: \"black\",\n        lineWidth: 3.0,\n      })\n    }\n  }\n}\n","import { Polygon } from \"maabm\"\nimport { PhysicsEngine } from \"../src/Engine\"\nimport { Mouse } from \"./mouse\"\n\ntype TxtElement = (txt: string) => void\n\nconst getTxtElement = (id: string): TxtElement => {\n  const el = document.getElementById(id)\n  if (!el) throw new Error(`\\`#${id}\\` element not found.`)\n\n  return (txt: string) => {\n    el.textContent = txt\n  }\n}\n\ninterface MenuOptions {\n  engine: PhysicsEngine\n  mouse: Mouse\n  pxPerM: number\n}\n\nexport class Menu {\n  public selectedId: undefined | number\n  public paused = false\n\n  private engine: PhysicsEngine\n  private mouse: Mouse\n  private pxPerM: number\n\n  private i = -1\n  private infoEl: HTMLParagraphElement\n  private txtElements: {\n    id: TxtElement\n    shapeType: TxtElement\n    mass: TxtElement\n    momentOfInertia: TxtElement\n    friction: TxtElement\n    restitution: TxtElement\n    dragCoefficient: TxtElement\n    position: TxtElement\n    velocity: TxtElement\n    angle: TxtElement\n    angularVelocity: TxtElement\n  }\n\n  constructor(ops: MenuOptions) {\n    this.engine = ops.engine\n    this.mouse = ops.mouse\n    this.pxPerM = ops.pxPerM\n\n    const info = document.getElementById(\"info\")\n    if (!info) throw new Error(\"`#info` element not found.\")\n    this.infoEl = info as HTMLParagraphElement\n\n    this.txtElements = {\n      angle: getTxtElement(\"angle\"),\n      angularVelocity: getTxtElement(\"angular-velocity\"),\n      dragCoefficient: getTxtElement(\"drag-coefficient\"),\n      friction: getTxtElement(\"friction\"),\n      id: getTxtElement(\"id\"),\n      mass: getTxtElement(\"mass\"),\n      momentOfInertia: getTxtElement(\"moment-of-inertia\"),\n      position: getTxtElement(\"position\"),\n      restitution: getTxtElement(\"restitution\"),\n      shapeType: getTxtElement(\"shape-type\"),\n      velocity: getTxtElement(\"velocity\"),\n    }\n\n    this.mouse.addEventListener((e) => {\n      if (e.type === \"mousedown\" && (e.button === 0 || e.button === 2) && this.mouse.position) {\n        const click = this.mouse.position.div(this.pxPerM)\n\n        let selectI = undefined as undefined | number\n        for (let i = 0; i < this.engine.objects.length; i++) {\n          const obj = this.engine.objects[i]\n\n          if (obj.shape.type === \"circle\") {\n            const dist = obj.position.sub(click).norm()\n\n            if (dist <= obj.shape.radius) {\n              selectI = i\n              break\n            }\n          } else {\n            const res = Polygon.isPointIn(obj.shape.vertices, click)\n            if (res !== -1) {\n              selectI = i\n              break\n            }\n          }\n        }\n\n        if (selectI !== undefined) {\n          this.i = selectI\n          const newId = this.engine.objects[selectI].id\n          if (this.selectedId === newId && e.button === 0) {\n            this.selectedId = undefined\n          } else {\n            this.selectedId = newId\n          }\n        }\n      }\n    })\n\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"p\") {\n        this.toggle()\n      }\n    })\n  }\n\n  public play() {\n    this.paused = false\n    this.engine.start()\n  }\n  public pause() {\n    this.paused = true\n    this.engine.stop()\n  }\n  public toggle() {\n    if (this.paused) {\n      this.play()\n    } else {\n      this.pause()\n    }\n  }\n\n  public previous() {\n    this.i--\n    if (this.i < 0) {\n      this.i = this.engine.objects.length - 1\n    }\n    this.selectedId = this.engine.objects[this.i].id\n  }\n  public next() {\n    this.i++\n    if (this.i > this.engine.objects.length - 1) {\n      this.i = 0\n    }\n    this.selectedId = this.engine.objects[this.i].id\n  }\n  public unselect() {\n    this.i = -1\n    this.selectedId = undefined\n  }\n\n  public select(id: number) {\n    for (let i = 0; i < this.engine.objects.length; i++) {\n      const o = this.engine.objects[i]\n      if (o.id === id) {\n        this.i = i\n        this.selectedId = id\n        return\n      }\n    }\n  }\n\n  public updateInfo() {\n    if (this.selectedId === undefined) {\n      this.infoEl.style.display = \"none\"\n      return\n    }\n    const obj = this.engine.objects.find((o) => o.id === this.selectedId)\n    if (!obj) {\n      this.selectedId = undefined\n      this.infoEl.style.display = \"none\"\n      this.i = -1\n      return\n    }\n\n    if (this.infoEl.style.display === \"none\") {\n      this.infoEl.style.display = \"block\"\n    }\n\n    const fixPrecision = 4\n\n    this.txtElements.id(obj.id.toString())\n    this.txtElements.shapeType(obj.shape.type)\n    this.txtElements.mass(obj.mass.toFixed(fixPrecision))\n    this.txtElements.momentOfInertia(obj.inertia.toFixed(fixPrecision))\n    this.txtElements.friction(obj.friction.toFixed(fixPrecision))\n    this.txtElements.restitution(obj.restitution.toFixed(fixPrecision))\n    this.txtElements.dragCoefficient(obj.dragCoefficient ? obj.dragCoefficient.toFixed(fixPrecision) : \"none\")\n    this.txtElements.position(`(${obj.position.x.toFixed(fixPrecision)};${obj.position.y.toFixed(fixPrecision)})`)\n    this.txtElements.velocity(`(${obj.velocity.x.toFixed(fixPrecision)};${obj.velocity.y.toFixed(fixPrecision)})`)\n    this.txtElements.angle((((obj.angle * 180) / Math.PI) % 360).toFixed(4))\n    this.txtElements.angularVelocity(((obj.angularVelocity * 180) / Math.PI).toFixed(4))\n  }\n}\n","import { Vec2D } from \"maabm\"\nimport { Vancas } from \"vancas\"\n\ninterface MouseOptions {\n  vancas: Vancas\n}\n\nexport class Mouse {\n  public button: \"left\" | \"middle\" | \"right\" | undefined\n  public position: Vec2D | undefined\n\n  private vancas: Vancas\n  private eventsListener: ((e: MouseEvent) => void)[] = []\n\n  constructor(ops: MouseOptions) {\n    this.vancas = ops.vancas\n\n    this.vancas.canvasEl.addEventListener(\"mousedown\", (e) => {\n      this.setMousePosition(e)\n\n      switch (e.button) {\n        case 0:\n          this.button = \"left\"\n          break\n        case 1:\n          this.button = \"middle\"\n          break\n        case 2:\n          this.button = \"right\"\n          break\n      }\n    })\n    this.vancas.canvasEl.addEventListener(\"mouseleave\", (e) => {\n      this.position = undefined\n      this.button = undefined\n\n      for (const listener of this.eventsListener) {\n        listener(e)\n      }\n    })\n    this.vancas.canvasEl.addEventListener(\"mousemove\", (e) => {\n      this.setMousePosition(e)\n    })\n    this.vancas.canvasEl.addEventListener(\"mouseup\", (e) => {\n      this.setMousePosition(e)\n      this.button = undefined\n    })\n  }\n\n  public addEventListener(listener: (e: MouseEvent) => void) {\n    this.eventsListener.push(listener)\n  }\n\n  private setMousePosition = (e: MouseEvent) => {\n    this.position = new Vec2D(\n      e.clientX - (this.vancas.canvasEl.offsetLeft - window.pageXOffset),\n      e.clientY - (this.vancas.canvasEl.offsetTop - window.pageYOffset)\n    )\n    for (const listener of this.eventsListener) {\n      listener(e)\n    }\n  }\n}\n","/**\n * For now the code of the playground is a bit messy...\n * Nonetheless it's a good overview of a how to use the vysics-engine.\n */\nimport { Vec2D } from \"maabm\"\nimport { createVancas } from \"vancas\"\nimport { createDumpingHook, PhysicsEngine } from \"../src/Engine\"\nimport { PhysicalObject } from \"../src/Objects\"\nimport { CircleRigidShape, RectangleRigidShape } from \"../src/Shapes\"\nimport { Drawers } from \"./drawers\"\nimport { ForceApplier } from \"./ForceApplier\"\nimport { Menu } from \"./menu\"\nimport { Mouse } from \"./mouse\"\n\nconst vancas = createVancas({\n  width: 1200,\n  height: 700,\n})\nvancas.initialize()\nvancas.mouse.contextmenu = false\nvancas.mouse.preventDefault = true\n\nconst pxPerM = 10\nconst world = { width: vancas.width / pxPerM, height: vancas.height / pxPerM }\n\nconst drawers = new Drawers({ pxPerM, vancas })\nconst mouse = new Mouse({ vancas })\n\nconst root = document.getElementById(\"root\")\nif (root) {\n  root.innerHTML = \"\"\n  root.appendChild(vancas.canvasEl)\n}\n\nconst ground = new PhysicalObject({\n  // Static\n  mass: 0,\n  shape: new RectangleRigidShape({\n    angle: 0,\n    center: new Vec2D(world.width / 2, world.height - 4),\n    width: world.width,\n    height: 8,\n  }),\n})\n\nconst platform = new PhysicalObject({\n  // Static\n  mass: 0,\n  shape: new RectangleRigidShape({\n    angle: Math.PI / 12,\n    center: new Vec2D(60, world.height / 2),\n    width: 35,\n    height: 4,\n  }),\n})\n\nconst wall = new PhysicalObject({\n  // Static\n  mass: 0,\n  shape: new RectangleRigidShape({\n    angle: 0,\n    center: new Vec2D(world.width - 3, world.height - 8 - 25),\n    width: 6,\n    height: 50,\n  }),\n})\n\nconst roof = new PhysicalObject({\n  // Static\n  mass: 0,\n  shape: new RectangleRigidShape({\n    angle: -Math.PI / 12,\n    center: new Vec2D(world.width - 18, 15),\n    width: 40,\n    height: 6,\n  }),\n})\n\nconst fallingBall = new PhysicalObject({\n  mass: 1,\n  shape: new CircleRigidShape({\n    angle: 0,\n    center: new Vec2D(world.width / 2, 1),\n    radius: 3,\n  }),\n})\n\nconst startingObjects = [ground, fallingBall, platform, wall, roof]\n\nwindow.addEventListener(\"keydown\", (e) => {\n  if (e.key === \" \") {\n    for (const obj of engine.objects) {\n      engine.removeObject(obj.id)\n    }\n    for (const obj of startingObjects.map((o) => o.copy())) {\n      engine.addObject(obj)\n    }\n  }\n\n  if (!mouse.position) return\n\n  const center = mouse.position.div(pxPerM)\n\n  if (e.key === \"r\") {\n    const newObj = new PhysicalObject({\n      mass: 3,\n      shape: new RectangleRigidShape({\n        angle: 0,\n        center,\n        height: 3,\n        width: 3,\n      }),\n    })\n    engine.addObject(newObj)\n    menu.select(newObj.id)\n  }\n  if (e.key === \"c\") {\n    const newObj = new PhysicalObject({\n      mass: 1,\n      shape: new CircleRigidShape({\n        angle: 0,\n        center,\n        radius: 2,\n      }),\n    })\n    engine.addObject(newObj)\n    menu.select(newObj.id)\n  }\n})\n\nconst engine = new PhysicsEngine({\n  width: world.width,\n  height: world.height,\n  objects: startingObjects.map((o) => o.copy()),\n})\n\nconst dampingHook = createDumpingHook({ linear: -0.1, angular: -0.1 })\n\nengine.addPreUpdateHook(dampingHook)\n\nengine.addPostUpdateHook((engine) => {\n  for (const obj of engine.objects) {\n    if (obj.position.x < 0 || obj.position.x > world.width) {\n      engine.removeObject(obj.id)\n    }\n  }\n})\n\nconst menu = new Menu({ engine, mouse, pxPerM })\nconst forceApplier = new ForceApplier({ engine, menu, mouse, pxPerM, vancas })\n\nvancas.render = () => {\n  vancas.background(\"lightgrey\")\n\n  menu.updateInfo()\n\n  const colors = [\"white\", \"brown\", \"purple\", \"yellow\", \"green\", \"blue\", \"orange\", \"pink\", \"cyan\"]\n\n  for (const obj of engine.objects) {\n    const isSelected = obj.id === menu.selectedId\n    if (obj.mass === 0) {\n      drawers.draw(obj, \"black\", isSelected)\n    } else {\n      drawers.draw(obj, colors[obj.id % colors.length], isSelected)\n    }\n  }\n\n  forceApplier.draw()\n\n  if (mouse.position) {\n    const pos = mouse.position\n    const w = 15\n    const h = 15\n    const l = 2\n    let c\n    switch (mouse.button) {\n      case \"left\":\n        c = \"red\"\n        break\n      case \"right\":\n        c = \"green\"\n        break\n      default:\n        c = \"grey\"\n        break\n    }\n\n    vancas.line({\n      x1: pos.x,\n      x2: pos.x,\n      y1: pos.y - h / 2,\n      y2: pos.y + h / 2,\n      lineWidth: l,\n      color: c,\n    })\n\n    vancas.line({\n      x1: pos.x - w / 2,\n      x2: pos.x + w / 2,\n      y1: pos.y,\n      y2: pos.y,\n      lineWidth: l,\n      color: c,\n    })\n  }\n}\n\nvancas.start()\n\nengine.start()\n"]}